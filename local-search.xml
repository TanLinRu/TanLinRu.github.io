<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Bigdecimal</title>
    <link href="/2023/02/26/Bigdecimal/"/>
    <url>/2023/02/26/Bigdecimal/</url>
    
    <content type="html"><![CDATA[<h2 id="Bigdecimal-（转载）"><a href="#Bigdecimal-（转载）" class="headerlink" title="Bigdecimal （转载）"></a>Bigdecimal （转载）</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Java在java.math包中提供的API类BigDecimal，用来对超过16位有效位的数进行精确的运算。双精度浮点型变量double可以处理16位有效数，但在实际应用中，可能需要对更大或者更小的数进行运算和处理。</p><p>一般情况下，对于不需要准确计算精度的数字，可以直接使用Float和Double处理，但是Double.valueOf(String) 和Float.valueOf(String)会丢失精度。所以如果需要精确计算的结果，则必须使用BigDecimal类来操作。</p><p>BigDecimal对象提供了传统的+、-、*、&#x2F;等算术运算符对应的方法，通过这些方法进行相应的操作。BigDecimal都是不可变的（immutable）的， 在进行每一次四则运算时，都会产生一个新的对象 ，所以在做加减乘除运算时要记得要保存操作后的值。</p><h3 id="Bigdecimal四大”坑”"><a href="#Bigdecimal四大”坑”" class="headerlink" title="Bigdecimal四大”坑”"></a>Bigdecimal四大”坑”</h3><h4 id="坑1-浮点类型"><a href="#坑1-浮点类型" class="headerlink" title="坑1-浮点类型"></a>坑1-浮点类型</h4><p>在学习了解BigDecimal的坑之前，先来说一个老生常谈的问题：如果使用Float、Double等浮点类型进行计算时，有可能得到的是一个近似值，而不是精确的值。</p><p>比如下面的代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp">  @Test<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test0</span>()</span>&#123;<br>    <span class="hljs-built_in">float</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">float</span> b = <span class="hljs-number">0.9f</span>;<br>    System.<span class="hljs-keyword">out</span>.println(a - b);<br>  &#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>结果是多少？0.1吗？不是，执行上面代码执行的结果是0.100000024。之所以产生这样的结果，是因为0.1的二进制表示是无限循环的。<strong>由于计算机的资源是有限的，所以是没办法用二进制精确的表示 0.1，只能用「近似值」来表示，就是在有限的精度情况下，最大化接近 0.1 的二进制数，于是就会造成精度缺失的情况</strong>。</p><p>关于上述的现象大家都知道，不再详细展开。同时，还会得出结论在科学计数法时可考虑使用浮点类型，但如果是涉及到金额计算要使用BigDecimal来计算。</p><p>那么，BigDecimal就一定能避免上述的浮点问题吗？来看下面的示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp">  @Test<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span>()</span>&#123;<br>    BigDecimal a = <span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-number">0.01</span>);<br>    BigDecimal b = BigDecimal.valueOf(<span class="hljs-number">0.01</span>);<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;a = &quot;</span> + a);<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;b = &quot;</span> + b);<br>  &#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>上述单元测试中的代码，a和b结果分别是什么？</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">a</span> = <span class="hljs-number">0.01000000000000000020816681711721685132943093776702880859375</span><br><span class="hljs-attr">b</span> = <span class="hljs-number">0.01</span><br>复制代码<br></code></pre></td></tr></table></figure><p>上面的实例说明，即便是使用BigDecimal，结果依旧会出现精度问题。这就涉及到创建BigDecimal对象时，如果有初始值，是采用new BigDecimal的形式，还是通过BigDecimal#valueOf方法了。</p><p>之所以会出现上述现象，是因为new BigDecimal时，传入的0.1已经是浮点类型了，鉴于上面说的这个值只是近似值，在使用new BigDecimal时就把这个近似值完整的保留下来了。</p><p>而BigDecimal#valueOf则不同，它的源码实现如下：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> BigDecimal <span class="hljs-title">valueOf</span><span class="hljs-params">(<span class="hljs-type">double</span> val)</span> </span>&#123;<br>        <span class="hljs-comment">// Reminder: a zero double returns &#x27;0.0&#x27;, so we cannot fastpath</span><br>        <span class="hljs-comment">// to use the constant ZERO.  This might be important enough to</span><br>        <span class="hljs-comment">// justify a factory approach, a cache, or a few private</span><br>        <span class="hljs-comment">// constants, later.</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">BigDecimal</span>(Double.<span class="hljs-built_in">toString</span>(val));<br>    &#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>在valueOf内部，使用Double#toString方法，将浮点类型的值转换成了字符串，因此就不存在精度丢失问题了。</p><p>此时就得出一个基本的结论：</p><ol><li><strong>在使用BigDecimal构造函数时，尽量传递字符串而非浮点类型；</strong></li><li><strong>如果无法满足第一条，则可采用BigDecimal#valueOf方法来构造初始化值</strong>。</li></ol><p>这里延伸一下，BigDecimal常见的构造方法有如下几种：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">BigDecimal</span>(int)       创建一个具有参数所指定整数值的对象。<br><span class="hljs-built_in">BigDecimal</span>(double)    创建一个具有参数所指定双精度值的对象。<br><span class="hljs-built_in">BigDecimal</span>(long)      创建一个具有参数所指定长整数值的对象。<br><span class="hljs-built_in">BigDecimal</span>(String)    创建一个具有参数所指定以字符串表示的数值的对象。<br>复制代码<br></code></pre></td></tr></table></figure><p>其中涉及到参数类型为double的构造方法，会出现上述的问题，使用时需特别留意。</p><h4 id="坑2-浮点精度的坑"><a href="#坑2-浮点精度的坑" class="headerlink" title="坑2-浮点精度的坑"></a>坑2-浮点精度的坑</h4><p>如果比较两个BigDecimal的值是否相等，你会如何比较？使用equals方法还是compareTo方法呢？</p><p>先来看一个示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp">  @Test<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span>()</span>&#123;<br>    BigDecimal a = <span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-string">&quot;0.01&quot;</span>);<br>    BigDecimal b = <span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-string">&quot;0.010&quot;</span>);<br>    System.<span class="hljs-keyword">out</span>.println(a.<span class="hljs-keyword">equals</span>(b));<br>    System.<span class="hljs-keyword">out</span>.println(a.compareTo(b));<br>  &#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>乍一看感觉可能相等，但实际上它们的本质并不相同。</p><p>equals方法是基于BigDecimal实现的equals方法来进行比较的，直观印象就是比较两个对象是否相同，那么代码是如何实现的呢？</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ini">    @Override<br>    public boolean equals(Object x) &#123;<br>        if (!(x instanceof BigDecimal))<br>            return false<span class="hljs-comment">;</span><br>        BigDecimal <span class="hljs-attr">xDec</span> = (BigDecimal) x<span class="hljs-comment">;</span><br>        if (<span class="hljs-attr">x</span> == this)<br>            return true<span class="hljs-comment">;</span><br>        if (scale != xDec.scale)<br>            return false<span class="hljs-comment">;</span><br>        long <span class="hljs-attr">s</span> = this.intCompact<span class="hljs-comment">;</span><br>        long <span class="hljs-attr">xs</span> = xDec.intCompact<span class="hljs-comment">;</span><br>        if (s != INFLATED) &#123;<br>            if (<span class="hljs-attr">xs</span> == INFLATED)<br>                <span class="hljs-attr">xs</span> = compactValFor(xDec.intVal)<span class="hljs-comment">;</span><br>            return <span class="hljs-attr">xs</span> == s<span class="hljs-comment">;</span><br>        &#125; else if (xs != INFLATED)<br>            return <span class="hljs-attr">xs</span> == compactValFor(this.intVal)<span class="hljs-comment">;</span><br><br>        return this.inflated().equals(xDec.inflated())<span class="hljs-comment">;</span><br>    &#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>仔细阅读代码可以看出，equals方法不仅比较了值是否相等，还比较了精度是否相同。上述示例中，由于两者的精度不同，所以equals方法的结果当然是false了。而compareTo方法实现了Comparable接口，真正比较的是值的大小，返回的值为-1（小于），0（等于），1（大于）。</p><p>基本结论：<strong>通常情况，如果比较两个BigDecimal值的大小，采用其实现的compareTo方法；如果严格限制精度的比较，那么则可考虑使用equals方法</strong>。</p><p>另外，这种场景在比较0值的时候比较常见，比如比较BigDecimal(“0”)、BigDecimal(“0.0”)、BigDecimal(“0.00”)，此时一定要使用compareTo方法进行比较。</p><h4 id="坑3-设置精度的坑"><a href="#坑3-设置精度的坑" class="headerlink" title="坑3-设置精度的坑"></a>坑3-设置精度的坑</h4><p>在项目中看到好多同学通过BigDecimal进行计算时不设置计算结果的精度和舍入模式，真是着急人，虽然大多数情况下不会出现什么问题。但下面的场景就不一定了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;1.0&quot;</span>);<br>    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;3.0&quot;</span>);<br>    a.divide(b);<br>  &#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>执行上述代码的结果是什么？<strong>ArithmeticException异常</strong>！</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp">java.lang.ArithmeticException: Non-terminating <span class="hljs-built_in">decimal</span> expansion; no exact representable <span class="hljs-built_in">decimal</span> result.<br><br>  at java.math.BigDecimal.divide(BigDecimal.java:<span class="hljs-number">1690</span>)<br>  ...<br>复制代码<br></code></pre></td></tr></table></figure><p>这个异常的发生在官方文档中也有说明：</p><p>If the quotient has a nonterminating decimal expansion and the operation is specified to return an exact result, an ArithmeticException is thrown. Otherwise, the exact result of the division is returned, as done for other operations.</p><p>总结一下就是，如果在除法（divide）运算过程中，如果商是一个无限小数（0.333…），而操作的结果预期是一个精确的数字，那么将会抛出<code>ArithmeticException</code>异常。</p><p>此时，只需在使用divide方法时指定结果的精度即可：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini">  @Test<br>  public void test3()&#123;<br>    BigDecimal <span class="hljs-attr">a</span> = new BigDecimal(<span class="hljs-string">&quot;1.0&quot;</span>)<span class="hljs-comment">;</span><br>    BigDecimal <span class="hljs-attr">b</span> = new BigDecimal(<span class="hljs-string">&quot;3.0&quot;</span>)<span class="hljs-comment">;</span><br>    BigDecimal <span class="hljs-attr">c</span> = a.divide(b, <span class="hljs-number">2</span>,RoundingMode.HALF_UP)<span class="hljs-comment">;</span><br>    System.out.println(c)<span class="hljs-comment">;</span><br>  &#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>执行上述代码，输入结果为0.33。</p><p>基本结论：<strong>在使用BigDecimal进行（所有）运算时，一定要明确指定精度和舍入模式</strong>。</p><p>拓展一下，舍入模式定义在RoundingMode枚举类中，共有8种：</p><ul><li>RoundingMode.UP：舍入远离零的舍入模式。在丢弃非零部分之前始终增加数字(始终对非零舍弃部分前面的数字加1)。注意，此舍入模式始终不会减少计算值的大小。</li><li>RoundingMode.DOWN：接近零的舍入模式。在丢弃某部分之前始终不增加数字(从不对舍弃部分前面的数字加1，即截短)。注意，此舍入模式始终不会增加计算值的大小。</li><li>RoundingMode.CEILING：接近正无穷大的舍入模式。如果 BigDecimal 为正，则舍入行为与 ROUNDUP 相同;如果为负，则舍入行为与 ROUNDDOWN 相同。注意，此舍入模式始终不会减少计算值。</li><li>RoundingMode.FLOOR：接近负无穷大的舍入模式。如果 BigDecimal 为正，则舍入行为与 ROUNDDOWN 相同;如果为负，则舍入行为与 ROUNDUP 相同。注意，此舍入模式始终不会增加计算值。</li><li>RoundingMode.HALF_UP：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。如果舍弃部分 &gt;&#x3D; 0.5，则舍入行为与 ROUND_UP 相同;否则舍入行为与 ROUND_DOWN 相同。注意，这是我们在小学时学过的舍入模式(四舍五入)。</li><li>RoundingMode.HALF_DOWN：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为上舍入的舍入模式。如果舍弃部分 &gt; 0.5，则舍入行为与 ROUND_UP 相同;否则舍入行为与 ROUND_DOWN 相同(五舍六入)。</li><li>RoundingMode.HALF_EVEN：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则向相邻的偶数舍入。如果舍弃部分左边的数字为奇数，则舍入行为与 ROUNDHALFUP 相同;如果为偶数，则舍入行为与 ROUNDHALF_DOWN 相同。注意，在重复进行一系列计算时，此舍入模式可以将累加错误减到最小。此舍入模式也称为“银行家舍入法”，主要在美国使用。四舍六入，五分两种情况。如果前一位为奇数，则入位，否则舍去。以下例子为保留小数点1位，那么这种舍入方式下的结果。1.15 &#x3D;&#x3D;&gt; 1.2 ,1.25 &#x3D;&#x3D;&gt; 1.2</li><li>RoundingMode.UNNECESSARY：断言请求的操作具有精确的结果，因此不需要舍入。如果对获得精确结果的操作指定此舍入模式，则抛出ArithmeticException。</li></ul><p>通常我们使用的四舍五入即RoundingMode.HALF_UP。</p><h5 id="精度设置示例"><a href="#精度设置示例" class="headerlink" title="精度设置示例"></a>精度设置示例</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">ROUND_UP          //不管保留数字后面是大是小(0除外)都会进1<br>ROUND_DOWN        //保留设置数字，后面所有直接去除<br>ROUND_HALF_UP     //常用的四舍五入 <br>ROUND_HALF_DOWN   //五舍六入<br>ROUND_CEILING     //向正无穷方向舍入<br>ROUND_FLOOR       //向负无穷方向舍入<br>ROUND_HALF_EVEN   //向（距离）最近的一边舍入，除非两边（的距离）是相等,如果是这样，如果保留位数是奇数，使用ROUND_HALF_UP，如果是偶数，使用ROUND_HALF_DOWN<br>ROUND_UNNECESSARY //计算结果是精确的，不需要舍入模式 <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;1.15&quot;</span>);<br>    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;1&quot;</span>);<br><br>    <span class="hljs-comment">//不管保留数字后面是大是小(0除外)都会进1 所以这里输出为1.2</span><br>    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">divide_1</span> <span class="hljs-operator">=</span> a.divide(b,<span class="hljs-number">1</span>,BigDecimal.ROUND_UP);<br>    <span class="hljs-comment">//保留设置数字，后面所有直接去除         所以这里输出为1.1</span><br>    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">divide_2</span> <span class="hljs-operator">=</span> a.divide(b,<span class="hljs-number">1</span>,BigDecimal.ROUND_DOWN);<br>    <span class="hljs-comment">//常用的四舍五入         所以这里输出1.2</span><br>    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">divide_3</span> <span class="hljs-operator">=</span> a.divide(b,<span class="hljs-number">1</span>,BigDecimal.ROUND_HALF_UP);<br>    <span class="hljs-comment">//这个可以理解成五舍六入   所以这里输出1.1</span><br>    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">divide_4</span> <span class="hljs-operator">=</span> a.divide(b,<span class="hljs-number">1</span>,BigDecimal.ROUND_HALF_DOWN);<br>    <span class="hljs-comment">//这里将1.15改成1.16</span><br>    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;1.16&quot;</span>);<br>    <span class="hljs-comment">//那么这里就符合五入了 所以输出变为1.2</span><br>    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">divide_5</span> <span class="hljs-operator">=</span> c.divide(b,<span class="hljs-number">1</span>,BigDecimal.ROUND_HALF_DOWN);<br>    System.out.println(<span class="hljs-string">&quot;divide_1 = &quot;</span> + divide_1);<br>    System.out.println(<span class="hljs-string">&quot;divide_2 = &quot;</span> + divide_2);<br>    System.out.println(<span class="hljs-string">&quot;divide_3 = &quot;</span> + divide_3);<br>    System.out.println(<span class="hljs-string">&quot;divide_4 = &quot;</span> + divide_4);<br>    System.out.println(<span class="hljs-string">&quot;divide_5 = &quot;</span> + divide_5);<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="坑4-三种字符串输出的坑"><a href="#坑4-三种字符串输出的坑" class="headerlink" title="坑4-三种字符串输出的坑"></a>坑4-三种字符串输出的坑</h4><p>当使用BigDecimal之后，需要转换成String类型，你是如何操作的？直接toString？</p><p>先来看看下面的代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp">@Test<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span>()</span>&#123;<br>  BigDecimal a = BigDecimal.valueOf(<span class="hljs-number">35634535255456719.22345634534124578902</span>);<br>  System.<span class="hljs-keyword">out</span>.println(a.toString());<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>执行的结果是上述对应的值吗？并不是：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-number">3.563453525545672</span><span class="hljs-built_in">E</span><span class="hljs-operator">+</span><span class="hljs-number">16</span><br>复制代码<br></code></pre></td></tr></table></figure><p>也就是说，本来想打印字符串的，结果打印出来的是科学计数法的值。</p><p>这里我们需要了解BigDecimal转换字符串的三个方法</p><ul><li>toPlainString()：不使用任何科学计数法；</li><li>toString()：在必要的时候使用科学计数法；</li><li>toEngineeringString() ：在必要的时候使用工程计数法。类似于科学计数法，只不过指数的幂都是3的倍数，这样方便工程上的应用，因为在很多单位转换的时候都是10^3；</li></ul><p>三种方法展示结果示例如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3cf77ec3a71445098bdf580031c7893b~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="计算法"></p><p>基本结论：<strong>根据数据结果展示格式不同，采用不同的字符串输出方法，通常使用比较多的方法为toPlainString()</strong> 。</p><p>另外，NumberFormat类的format()方法可以使用BigDecimal对象作为其参数，可以利用BigDecimal对超出16位有效数字的货币值，百分值，以及一般数值进行格式化控制。</p><p>使用示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">NumberFormat</span> <span class="hljs-variable">currency</span> <span class="hljs-operator">=</span> NumberFormat.getCurrencyInstance(); <span class="hljs-comment">//建立货币格式化引用</span><br><span class="hljs-type">NumberFormat</span> <span class="hljs-variable">percent</span> <span class="hljs-operator">=</span> NumberFormat.getPercentInstance();  <span class="hljs-comment">//建立百分比格式化引用</span><br>percent.setMaximumFractionDigits(<span class="hljs-number">3</span>); <span class="hljs-comment">//百分比小数点最多3位</span><br><br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">loanAmount</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;15000.48&quot;</span>); <span class="hljs-comment">//金额</span><br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">interestRate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;0.008&quot;</span>); <span class="hljs-comment">//利率</span><br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">interest</span> <span class="hljs-operator">=</span> loanAmount.multiply(interestRate); <span class="hljs-comment">//相乘</span><br><br>System.out.println(<span class="hljs-string">&quot;金额:\t&quot;</span> + currency.format(loanAmount));<br>System.out.println(<span class="hljs-string">&quot;利率:\t&quot;</span> + percent.format(interestRate));<br>System.out.println(<span class="hljs-string">&quot;利息:\t&quot;</span> + currency.format(interest));<br>复制代码<br></code></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">金额: ￥15,000.48 </span><br><span class="hljs-section">利率: 0.8% </span><br><span class="hljs-section">利息: ￥120.00</span><br></code></pre></td></tr></table></figure><h3 id="资料引用："><a href="#资料引用：" class="headerlink" title="资料引用："></a>资料引用：</h3><ul><li><a href="https://juejin.cn/post/7121852516228136996#heading-5">不掌握这些坑，你敢用BigDecimal吗？</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>BigDecimal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BigDecimal</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Log4j2配置模板</title>
    <link href="/2023/01/08/Log4j2%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF/"/>
    <url>/2023/01/08/Log4j2%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h2 id="Log4j2配置模板"><a href="#Log4j2配置模板" class="headerlink" title="Log4j2配置模板"></a>Log4j2配置模板</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-comment">&lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;</span><br><span class="hljs-comment">&lt;!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出--&gt;</span><br><span class="hljs-comment">&lt;!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">status</span>=<span class="hljs-string">&quot;WARN&quot;</span> <span class="hljs-attr">monitorInterval</span>=<span class="hljs-string">&quot;1800&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--预先定义通用pattern--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--输出日志的格式--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;property name=&quot;pattern&quot;&gt;[%d&#123;yyyy-MM-dd HH:mm:ss:SSS&#125;&#123;GMT+8&#125;][%5p][%20c][- %l - %m] %n&lt;/property&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pattern&quot;</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;-1&#125;.%M()/%L - %msg%xEx%n<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;property name=&quot;pattern&quot;&gt;%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125;.%M()/%L  - %msg%xEx%n&lt;/property&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;filePath&quot;</span>&gt;</span>./logs<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;property name=&quot;filePath&quot;&gt;C:UsersAdministratorDesktoplog&lt;/property&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--先定义所有的appender--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appenders</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--这个输出控制台的配置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">console</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Console&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;SYSTEM_OUT&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--输出日志的格式--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;$&#123;pattern&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">console</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--&gt;</span><br>        <span class="hljs-comment">&lt;!-- filePattern：rollover时原文件所属的文件夹目录和文件名规则--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">RollingFile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;RollingFileInfo&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;$&#123;filePath&#125;/info.log&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">filePattern</span>=<span class="hljs-string">&quot;$&#123;filePath&#125;/$$&#123;date:yyyy-MM&#125;/info-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 过滤日志：过滤器都有两个属性onMatch和onMismatch，指定匹配过滤器和不匹配过滤器时候执行的操作，有三个取值ACCEPT，DENY，NEUTRAL--&gt;</span><br>            <span class="hljs-comment">&lt;!-- 该过滤器只将info级别输入到文件--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Filters</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ThresholdFilter</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;warn&quot;</span> <span class="hljs-attr">onMatch</span>=<span class="hljs-string">&quot;DENY&quot;</span> <span class="hljs-attr">onMismatch</span>=<span class="hljs-string">&quot;NEUTRAL&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ThresholdFilter</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span> <span class="hljs-attr">onMatch</span>=<span class="hljs-string">&quot;ACCEPT&quot;</span> <span class="hljs-attr">onMismatch</span>=<span class="hljs-string">&quot;DENY&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">Filters</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;$&#123;pattern&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Policies</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--当日期不匹配的时候执行rollover。例如上面定义的filePattern是$&#123;log_path&#125;logs/app-%d&#123;yyyy-MM-dd&#125;-%i.log.zip，</span><br><span class="hljs-comment">                日期格式包含年月日，那么就会每天执行一次rollover。它有两个可定义的属性，一个是interval，表示rollover的间隔，</span><br><span class="hljs-comment">                单位是日期的最小单位。比如如果日期是%d&#123;yyyy-MM-dd-HH&#125;，那么interval=&quot;6&quot;意思就是每隔六个小时。另一个属性是modulate，</span><br><span class="hljs-comment">                指定是否调整rollover的间隔。假如现在是上午3点，间隔是4个小时，当modulate为false的时候下次rollover就是上午七点，</span><br><span class="hljs-comment">                以此类推，如果modulate是true下次rollover就是上午4点，然后以此类推。--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">TimeBasedTriggeringPolicy</span> <span class="hljs-attr">modulate</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">interval</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!-- 日志文件到达指定大小是执行rollover，单位可以使KB、MB、GB。--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">SizeBasedTriggeringPolicy</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;50 MB&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">Policies</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了10 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">DefaultRolloverStrategy</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;10&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">RollingFile</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">RollingFile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;RollingFileWarn&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;$&#123;filePath&#125;/warn.log&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">filePattern</span>=<span class="hljs-string">&quot;$&#123;filePath&#125;/$$&#123;date:yyyy-MM&#125;/warn-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 该过滤器只将warn级别输入到文件--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Filters</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ThresholdFilter</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;error&quot;</span> <span class="hljs-attr">onMatch</span>=<span class="hljs-string">&quot;DENY&quot;</span> <span class="hljs-attr">onMismatch</span>=<span class="hljs-string">&quot;NEUTRAL&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ThresholdFilter</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;warn&quot;</span> <span class="hljs-attr">onMatch</span>=<span class="hljs-string">&quot;ACCEPT&quot;</span> <span class="hljs-attr">onMismatch</span>=<span class="hljs-string">&quot;DENY&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">Filters</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;$&#123;pattern&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Policies</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">TimeBasedTriggeringPolicy</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">SizeBasedTriggeringPolicy</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;50 MB&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">Policies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">DefaultRolloverStrategy</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;10&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">RollingFile</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">RollingFile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;RollingFileError&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;$&#123;filePath&#125;/error.log&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">filePattern</span>=<span class="hljs-string">&quot;$&#123;filePath&#125;/$$&#123;date:yyyy-MM&#125;/error-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 该过滤器只将error级别输入到文件--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ThresholdFilter</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;error&quot;</span> <span class="hljs-attr">onMatch</span>=<span class="hljs-string">&quot;ACCEPT&quot;</span> <span class="hljs-attr">onMismatch</span>=<span class="hljs-string">&quot;DENY&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;$&#123;pattern&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Policies</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">TimeBasedTriggeringPolicy</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">SizeBasedTriggeringPolicy</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;50 MB&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">Policies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">DefaultRolloverStrategy</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;10&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">RollingFile</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appenders</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--然后定义logger，只有定义了logger并引入的appender，appender才会生效--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">loggers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--过滤掉spring和mybatis的一些无用的DEBUG信息--&gt;</span><br>        <span class="hljs-comment">&lt;!--additivity是 子Logger 是否继承 父Logger 的 输出源（appender） 的标志位。</span><br><span class="hljs-comment">        具体说，默认情况下子Logger会继承父Logger的appender，也就是说子Logger会在父Logger的appender里输出。</span><br><span class="hljs-comment">        若是additivity设为false，则子Logger只会在自己的appender里输出，而不会在父Logger的appender里输出。--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.springframework&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.mybatis&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;Console&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;RollingFileInfo&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;RollingFileWarn&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;RollingFileError&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--打印sql--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;logger name=&quot;org.mybatis&quot; level=&quot;DEBUG&quot; additivity=&quot;true&quot;/&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;logger name=&quot;com.holderzone.saas.store.order.mapper&quot; level=&quot;DEBUG&quot; additivity=&quot;true&quot;&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;appender-ref ref=&quot;Console&quot;/&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;/logger&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">loggers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Log4J2配置模板</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Log4J2配置模板</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式事务</title>
    <link href="/2023/01/08/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    <url>/2023/01/08/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h2><p>在对于分布式事务，可按照<strong>对数据的一个一致性来划分</strong>，分别为：</p><ul><li><p><strong>强一致性（刚性事务）</strong></p><ul><li>2PC<ul><li>XA</li></ul></li><li>3PC</li></ul></li><li><p><strong>弱一致性（柔性事务）</strong></p><p>在若一致性的分布式事务中，本质都是<strong>通过本地事务+补偿事务</strong>的层次，把原本<strong>分布式处理的方式转换为本地化</strong>去实现的</p><ul><li><p>TCC</p><p>其性能一般来说是几种柔性事务模式中最高的，但它仍不能满足所有的场景</p></li><li><p>SAGA</p></li><li><p>本地事务+最大努力通知</p></li></ul></li></ul><blockquote><p><strong>PS: 对于这块的一个分类，还可以从如下层面去分析</strong></p><ul><li>是否交由组件去完成（2PC，3PC）【需要相关组件有相关协议兼容】</li><li>还是交由应用程序去完成（TCC&#x2F;SAGA&#x2F;本地事务表+消息队列）</li><li>还是使用分布式组件去解决（PAXOS&#x2F;Raft&#x2F;ZAB等）</li></ul></blockquote><h3 id="2PC"><a href="#2PC" class="headerlink" title="2PC"></a>2PC</h3><p><img src="/2023/01/08/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/2PC%EF%BC%88%E4%B8%A4%E6%AE%B5%E5%BC%8F%E6%8F%90%E4%BA%A4%EF%BC%89.png" alt="2PC（两段式提交）"></p><p>在2PC中，分为如下两个阶段</p><ol><li><p>准备阶段（投票阶段）</p><p>协调者询问事务的所有参与者是否准备好提交，参与者如果已经准备好提交则回复 Prepared，否则回复 Non-Prepared。</p><p>对于数据库来说，准备操作是在重做日志中记录全部事务提交操作所要做的内容，它与本地事务中真正提交的区别只是暂不写入最后一条 Commit Record 而已，<strong>这意味着在做完数据持久化后并不立即释放隔离性，即仍继续持有锁，维持数据对其他非事务内观察者的隔离状态。</strong></p></li><li><p>提交阶段（执行阶段）</p><p>协调者如果在上一阶段收到所有事务参与者回复的 Prepared 消息，则先自己在本地持久化事务状态为 Commit，在此操作完成后向所有参与者发送 Commit 指令，所有参与者立即执行提交操作；否则，任意一个参与者回复了 Non-Prepared 消息，或任意一个参与者超时未回复，协调者将自己的事务状态持久化为 Abort 之后，向所有参与者发送 Abort 指令，参与者立即执行回滚操作。</p><p>对于数据库来说，这个阶段的提交操作应是很轻量的，仅仅是持久化一条 Commit Record 而已，通常能够快速完成，只有收到 Abort 指令时，才需要根据回滚日志清理已提交的数据，<strong>这可能是相对重负载的操作。</strong></p></li></ol><p>对于2PC来说，上述的一个数据提交流程看似非常完善，<strong>但确保一致性还需要如下前提</strong></p><ul><li>必须假设网络在提交阶段的短时间内是可靠的，即提交阶段不会丢失消息。同时也假设网络通信在全过程都不会出现误差，即可以丢失消息，但不会传递错误的消息，XA 的设计目标并不是解决诸如<a href="https://en.wikipedia.org/wiki/Byzantine_fault">拜占庭将军</a>一类的问题。两段式提交中投票阶段失败了可以补救（回滚），而提交阶段失败了无法补救（不再改变提交或回滚的结果，只能等崩溃的节点重新恢复），因而此阶段耗时应尽可能短，这也是为了尽量控制网络风险的考虑。</li><li>必须假设因为网络分区、机器崩溃或者其他原因而导致失联的节点最终能够恢复，不会永久性地处于失联状态。由于在准备阶段已经写入了完整的重做日志，所以当失联机器一旦恢复，就能够从日志中找出已准备妥当但并未提交的事务数据，并向协调者查询该事务的状态，确定下一步应该进行提交还是回滚操作。</li></ul><p>同样，看似无懈可击，完美的解决数据一致性的问题，但是还是有如下缺点：</p><ul><li><strong>单点问题</strong>：协调者在两段提交中具有举足轻重的作用，<strong>协调者等待参与者回复时可以有超时机制，允许参与者宕机</strong>，但<strong>参与者等待协调者指令时无法做超时处理</strong>。一旦宕机的不是其中某个参与者，而是协调者的话，所有参与者都会受到影响。<strong>如果协调者一直没有恢复，没有正常发送 Commit 或者 Rollback 的指令，那所有参与者都必须一直等待。</strong></li><li><strong>性能问题</strong>：两段提交过程中，所有参与者相当于被绑定成为一个统一调度的整体，期间要<strong>经过两次远程服务调用，三次数据持久化（准备阶段写重做日志，协调者做状态持久化，提交阶段在日志写入 Commit Record）</strong>，整个过程将<strong>持续到参与者集群中最慢的那一个处理操作结束为止</strong>，这决定了两段式提交的性能通常都较差。</li><li><strong>一致性风险</strong>：前面已经提到，<strong>两段式提交的成立是有前提条件的，当网络稳定性和宕机恢复能力的假设不成立时，仍可能出现一致性问题。</strong>宕机恢复能力这一点不必多谈，1985 年 Fischer、Lynch、Paterson 提出了“<a href="https://en.wikipedia.org/wiki/Consensus_(computer_science)#Solvability_results_for_some_agreement_problems">FLP 不可能原理</a>”，证明了如果宕机最后不能恢复，那就不存在任何一种分布式协议可以正确地达成一致性结果。该原理在分布式中是与“CAP 不可兼得原理“齐名的理论。而网络稳定性带来的一致性风险是指：尽管提交阶段时间很短，但这仍是一段明确存在的危险期，如果协调者在发出准备指令后，根据收到各个参与者发回的信息确定事务状态是可以提交的，协调者会先持久化事务状态，并提交自己的事务，如果这时候网络忽然被断开，无法再通过网络向所有参与者发出 Commit 指令的话，就会导致部分数据（协调者的）已提交，但部分数据（参与者的）既未提交，也没有办法回滚，产生了数据不一致的问题。</li></ul><blockquote><p><strong>为了解决参与者阻塞问题，可用状态机方案来进行处理</strong></p></blockquote><h3 id="3PC"><a href="#3PC" class="headerlink" title="3PC"></a>3PC</h3><p>为了缓解2PC中一部分缺陷（<strong>协调者单节点问题和准备阶段的性能问题</strong>），3PC便为此而生</p><blockquote><p><strong>2PC与3PC性能对比</strong></p><p>在事务需要回滚的场景中，三段式的性能通常是要比两段式好很多的，但在事务能够正常提交的场景中，两者的性能都依然很差，甚至三段式因为多了一次询问，还要稍微更差一些。</p></blockquote><p><img src="/2023/01/08/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/3PC%E6%8F%90%E4%BA%A4%E6%B5%81%E7%A8%8B.png" alt="3PC提交流程"></p><ul><li><p>CnaCommit</p><p>CanCommit 是一个询问阶段，协调者让每个参与的数据库根据自身状态，评估该事务是否有可能顺利完成。</p></li><li><p>PreCommit（与2PC的准备阶段处理是一样的）</p><blockquote><p>如果在 PreCommit 阶段之后发生了协调者宕机，即参与者没有能等到 DoCommit 的消息的话，默认的操作策略将是提交事务而不是回滚事务或者持续等待，这就相当于避免了协调者单点问题的风险。</p></blockquote></li><li><p>DoCommit</p></li></ul><blockquote><p><strong>三段式提交对单点问题和回滚时的性能问题有所改善</strong>，但是它<strong>对一致性风险问题并未有任何改进</strong>，在这方面它面临的风险甚至反而是<strong>略有增加了的</strong>。譬如，<strong>进入 PreCommit 阶段之后，协调者发出的指令不是 Ack 而是 Abort</strong>，而此时因网络问题，<strong>有部分参与者直至超时都未能收到协调者的 Abort 指令的话，这些参与者将会错误地提交事务，这就产生了不同参与者之间数据不一致的问题。</strong></p></blockquote><h3 id="TCC（Try-Confirm-Cancel）"><a href="#TCC（Try-Confirm-Cancel）" class="headerlink" title="TCC（Try-Confirm-Cancel）"></a>TCC（Try-Confirm-Cancel）</h3><p>TCC 较为烦琐，它是一种<strong>业务侵入式较强的事务方案</strong>，要求业务处理过程必须拆分为“预留业务资源”和“确认&#x2F;释放消费资源”两个子过程。如同 TCC 的名字所示，它分为以下三个阶段。</p><ul><li><strong>Try</strong>：尝试执行阶段，完成所有业务可执行性的检查（保障一致性），并且预留好全部需用到的业务资源（保障隔离性）。</li><li><strong>Confirm</strong>：确认执行阶段，不进行任何业务检查，直接使用 Try 阶段准备的资源来完成业务处理。Confirm 阶段可能会重复执行，因此本阶段所执行的操作需要具备幂等性。</li><li><strong>Cancel</strong>：取消执行阶段，释放 Try 阶段预留的业务资源。Cancel 阶段可能会重复执行，也需要满足幂等性。</li></ul><h3 id="SAGA"><a href="#SAGA" class="headerlink" title="SAGA"></a>SAGA</h3><h3 id="本地事务-最大努力通知"><a href="#本地事务-最大努力通知" class="headerlink" title="本地事务+最大努力通知"></a>本地事务+最大努力通知</h3>]]></content>
    
    
    <categories>
      
      <category>分布式事务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式事务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Netty - 异常问题</title>
    <link href="/2022/12/18/Netty-%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/"/>
    <url>/2022/12/18/Netty-%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="Netty-异常问题"><a href="#Netty-异常问题" class="headerlink" title="Netty 异常问题"></a>Netty 异常问题</h2><p>本周的时候，线上的TCP服务，出现了<code>Ping</code>超时的问题，当时仔细从一下方面着手解决异常问题</p><ul><li>当前服务哪里出现了阻塞操作</li><li>业务线程哪里耗时了</li></ul><p>后来排查了下并做了整体的，方案如下</p><ul><li>修改IM发送方式，使用线程池进行同步非阻塞处理</li><li>（暂时方案）将<code>ping</code>业务单独放到一个线程池处理</li><li>增加业务消费监控，方便后续定位异常问题</li><li>（因为服务器设置的TCP内存自适应分配）TCP发送&#x2F;接受缓冲区</li></ul><p>后来是完美解决（暂时解决了）</p><p><strong>但因为自己当时没好好审代码(就自己太菜，不好好学)，导致服务出现了频繁的FULL GC</strong></p><p>异常代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">pipeline.addLast(ew <span class="hljs-title function_">NioEventLoopGroup</span><span class="hljs-params">()</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">PingHandler</span>());<br></code></pre></td></tr></table></figure><blockquote><p><strong>因为每次创建 <code>channel</code>，相关的<code>channelPipeline</code>都会实例化一次</strong></p><p><strong>那就是上述的代码，会在每次生成一个线程池+线程</strong></p><p><strong>业务方的这样的话，再业务方没关闭相关TCP连接时，服务便会保留相关连接，且内存损耗增加，最后导致业务方<code>ping</code>连接失败，重连，进而Full GC频繁增加</strong></p><p><strong>同时，因为业务重连，导致 RECV-Q增加，因为业务根本没<code>accept</code>，导致全连接队列增加</strong></p></blockquote><p><strong>解决方案</strong></p><p><strong>把相关<code>线程池</code>作为变量传入，避免重复创建导致Full gc</strong></p>]]></content>
    
    
    <categories>
      
      <category>Netty</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Netty 异常问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Netty 服务端模板代码</title>
    <link href="/2022/12/18/Netty-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%A8%A1%E6%9D%BF%E4%BB%A3%E7%A0%81/"/>
    <url>/2022/12/18/Netty-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%A8%A1%E6%9D%BF%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h2 id="Netty服务端模板"><a href="#Netty服务端模板" class="headerlink" title="Netty服务端模板"></a>Netty服务端模板</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tlq.netty.example;<br><br><span class="hljs-keyword">import</span> io.netty.bootstrap.ServerBootstrap;<br><span class="hljs-keyword">import</span> io.netty.channel.Channel;<br><span class="hljs-keyword">import</span> io.netty.channel.ChannelInitializer;<br><span class="hljs-keyword">import</span> io.netty.channel.ChannelPipeline;<br><span class="hljs-keyword">import</span> io.netty.channel.EventLoopGroup;<br><span class="hljs-keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;<br><span class="hljs-keyword">import</span> io.netty.channel.socket.SocketChannel;<br><span class="hljs-keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.HttpObjectAggregator;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.HttpRequestDecoder;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.HttpResponseEncoder;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;<br><span class="hljs-keyword">import</span> io.netty.channel.ChannelHandlerContext;<br><span class="hljs-keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.websocketx.TextWebSocketFrame;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Stephen Mallette (http://stephen.genoprime.com)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(Server.class);<br>    <span class="hljs-keyword">private</span> Channel channel;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//Reactor线程池</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">bossGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//Hnadler线程池</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">workerGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ServerBootstrap</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>();<br>            <span class="hljs-comment">//注册相关Reactor线程/handler线程</span><br>            b.group(bossGroup, workerGroup)<br>                    .channel(NioServerSocketChannel.class)<br>                <span class="hljs-comment">//注册 childHandler 相关 channelPipeline</span><br>                    .childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocketServerInitializer</span>());<br><br>            <span class="hljs-comment">//bind</span><br>            ch = b.bind(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8182</span>).sync().channel();<br>            ch.closeFuture().sync();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            bossGroup.shutdownGracefully();<br>            workerGroup.shutdownGracefully();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Server</span>().run();<br>    &#125;<br><br>    <span class="hljs-comment">//相关 channelHnalder处理</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketServerInitializer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt; &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(<span class="hljs-keyword">final</span> SocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ChannelPipeline</span> <span class="hljs-variable">pipeline</span> <span class="hljs-operator">=</span> ch.pipeline();<br>            pipeline.addLast(<span class="hljs-string">&quot;http-request-decoder&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpRequestDecoder</span>());<br>            pipeline.addLast(<span class="hljs-string">&quot;aggregator&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpObjectAggregator</span>(<span class="hljs-number">1</span>));<br>            pipeline.addLast(<span class="hljs-string">&quot;http-response-encoder&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpResponseEncoder</span>());<br>            pipeline.addLast(<span class="hljs-string">&quot;request-handler&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocketServerProtocolHandler</span>(<span class="hljs-string">&quot;/websocket&quot;</span>));<br>            pipeline.addLast(<span class="hljs-string">&quot;handler&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SomeHandler</span>());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SomeHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SimpleChannelInboundHandler</span>&lt;TextWebSocketFrame&gt; &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead0</span><span class="hljs-params">(ChannelHandlerContext channelHandlerContext, TextWebSocketFrame textWebSocketFrame)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> textWebSocketFrame.text();<br>            <span class="hljs-comment">// uncomment to print request</span><br>            <span class="hljs-comment">// /logger.info(&quot;Request received: &#123;&#125;&quot;, x);</span><br>            <span class="hljs-keyword">final</span> String[] y = x.split(<span class="hljs-string">&quot;:&quot;</span>);<br>            channelHandlerContext.writeAndFlush(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TextWebSocketFrame</span>(y[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;:&quot;</span> + y[<span class="hljs-number">1</span>].toUpperCase()));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Netty</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Netty 服务端摸板</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux - 常见问题排查命令</title>
    <link href="/2022/12/18/Linux-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/12/18/Linux-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="Linux-常见问题排查命令"><a href="#Linux-常见问题排查命令" class="headerlink" title="Linux - 常见问题排查命令"></a>Linux - 常见问题排查命令</h2><p>在实际Linux服务器异常排查中，主要对如下几种场景进行排查</p><ul><li>服务器硬件、系统信息<ul><li>CPU、内存</li></ul></li><li>进程</li><li>网络</li><li>其他<ul><li>文件</li><li>用户</li></ul></li></ul><h3 id="服务器硬件、系统信息"><a href="#服务器硬件、系统信息" class="headerlink" title="服务器硬件、系统信息"></a>服务器硬件、系统信息</h3><h4 id="top-显示或管理执行中的程序"><a href="#top-显示或管理执行中的程序" class="headerlink" title="top 显示或管理执行中的程序"></a>top 显示或管理执行中的程序</h4><p>参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">-b：以批处理模式操作；<br>-c：显示完整的治命令；<br>-d：屏幕刷新间隔时间；<br>-I：忽略失效过程；<br>-s：保密模式；<br>-S：累积模式；<br>-i&lt;时间&gt;：设置间隔时间；<br>-u&lt;用户名&gt;：指定用户名；<br>-p&lt;进程号&gt;：指定进程；<br>-n&lt;次数&gt;：循环显示的次数。<br></code></pre></td></tr></table></figure><p>交互式命令</p><p>在top命令执行过程中可以使用的一些交互命令。这些命令都是单字母的，如果在命令行中使用了-s选项， 其中一些命令可能会被屏蔽。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">h：显示帮助画面，给出一些简短的命令总结说明；<br>k：终止一个进程；<br>i：忽略闲置和僵死进程，这是一个开关式命令；<br>q：退出程序；<br>r：重新安排一个进程的优先级别；<br>S：切换到累计模式；<br>s：改变两次刷新之间的延迟时间（单位为s），如果有小数，就换算成ms。输入0值则系统将不断刷新，默认值是5s；<br>f或者F：从当前显示中添加或者删除项目；<br>o或者O：改变显示项目的顺序；<br>l：切换显示平均负载和启动时间信息；<br>m：切换显示内存信息；<br>t：切换显示进程和CPU状态信息；<br>c：切换显示命令名称和完整命令行；<br>M：根据驻留内存大小进行排序；<br>P：根据CPU使用百分比大小进行排序；<br>T：根据时间/累计时间进行排序；<br>w：将当前设置写入~/.toprc文件中。<br></code></pre></td></tr></table></figure><p>实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">top - 07:50:52 up 22 min,  0 users,  load average: 0.00, 0.00, 0.00<br>Tasks:   4 total,   1 running,   3 sleeping,   0 stopped,   0 zombie<br><span class="hljs-meta prompt_">%</span><span class="language-bash">Cpu(s):  0.1 us,  0.0 sy,  0.0 ni, 99.8 <span class="hljs-built_in">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br>MiB Mem :   7636.0 total,   6071.8 free,    586.4 used,    977.8 buff/cache<br>MiB Swap:   2048.0 total,   2048.0 free,      0.0 used.   6821.2 avail Mem<br><br>  PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND<br>    1 root      20   0    4112   3244   2828 S   0.0   0.0   0:00.04 bash<br>    9 root      20   0    2612    604    536 S   0.0   0.0   0:00.02 sh<br>   15 root      20   0    4112   3380   2932 S   0.0   0.0   0:00.00 bash<br>   18 root      20   0    6100   3316   2804 R   0.0   0.0   0:00.03 top<br></code></pre></td></tr></table></figure><p>含义解析</p><ol><li><p>第一行是任务队列信息，同 uptime 命令的执行结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">top - <br>07:57:23 当前时间<br>up 28  min 系统运行时间，格式为时:分<br>0 users  当前登录用户数<br>load average: 0.00, 0.00, 0.00 系统负载，即任务队列的平均长度。三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值。<br></code></pre></td></tr></table></figure></li><li><p>第二、三行为进程和CPU的信息。当有多个CPU时，这些内容可能会超过两行。内容如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">Tasks:   <br>4 total 进程总数<br>1 running 正在运行的进程数<br>3 sleeping 睡眠的进程数<br>0 stopped 停止的进程数<br>0 zombie 僵尸进程数<br><span class="hljs-meta prompt_">%</span><span class="language-bash">Cpu(s):</span>  <br>0.0 us 用户空间占用CPU百分比<br>0.0 sy 内核空间占用CPU百分比<br>0.0 ni 用户进程空间内改变过优先级的进程占用CPU百分比<br>100.0 id 空闲CPU百分比<br>0.0 wa 等待输入输出的CPU时间百分比<br>0.0 hi 硬件CPU中断占用百分比<br>0.0 si 软中断占用百分比<br>0.0 st 虚拟机占用百分比<br></code></pre></td></tr></table></figure></li><li><p>最后两行为内存信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">MiB Mem :   <br>7636.0 total 物理内存总量<br>6072.3 free 使用的物理内存总量<br>585.9 used 空闲内存总量<br>977.8 buff/cache 用作内核缓存的内存量<br>MiB Swap:   <br>2048.0 total 交换区总量<br>2048.0 free 使用的交换区总量<br>0.0 used 空闲交换区总量<br>6821.8 avail Mem 缓冲的交换区总量,内存中的内容被换出到交换区，而后又被换入到内存，但使用过的交换区尚未被覆盖，该数值即为这些内容已存在于内存中的交换区的大小,相应的内存再次被换出时可不必再对交换区写入。<br></code></pre></td></tr></table></figure></li><li><p>进程信息区统计信息区域的下方显示了各个进程的详细信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell">PID     进程id<br>PPID    父进程id<br>RUSER   Real user name<br>UID     进程所有者的用户id<br>USER    进程所有者的用户名<br>GROUP   进程所有者的组名<br>TTY     启动进程的终端名。不是从终端启动的进程则显示为 ?<br>PR      优先级<br>NI      nice值。负值表示高优先级，正值表示低优先级<br>P       最后使用的CPU，仅在多CPU环境下有意义<br><span class="hljs-meta prompt_">%</span><span class="language-bash">CPU    上次更新到现在的CPU时间占用百分比</span><br>TIME    进程使用的CPU时间总计，单位秒<br>TIME+   进程使用的CPU时间总计，单位1/100秒<br><span class="hljs-meta prompt_">%</span><span class="language-bash">MEM    进程使用的物理内存百分比</span><br>VIRT    进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES<br>SWAP    进程使用的虚拟内存中，被换出的大小，单位kb。<br>RES     进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA （重点：可直接观察当前程序使用内存 ，进而定位问题）<br>CODE    可执行代码占用的物理内存大小，单位kb<br>DATA    可执行代码以外的部分(数据段+栈)占用的物理内存大小，单位kb<br>SHR     共享内存大小，单位kb<br>nFLT    页面错误次数<br>nDRT    最后一次写入到现在，被修改过的页面数。<br>S       进程状态(D=不可中断的睡眠状态,R=运行,S=睡眠,T=跟踪/停止,Z=僵尸进程)<br>COMMAND 命令名/命令行<br>WCHAN   若该进程在睡眠，则显示睡眠中的系统函数名<br>Flags   任务标志，参考 sched.h<br></code></pre></td></tr></table></figure><blockquote><p>上述列，是根据 <code>a-z</code>排序，可通过如下方法来进行更改显示或排序处理</p><blockquote><p>更改显示内容通过 <strong>f</strong> 键可以选择显示的内容。按 f 键之后会显示列的列表，按 a-z 即可显示或隐藏对应的列，最后按回车键确定。<br>按 <strong>o</strong> 键可以改变列的显示顺序。按小写的 a-z 可以将相应的列向右移动，而大写的 A-Z 可以将相应的列向左移动。最后按回车键确定。<br>按大写的 <strong>F</strong> 或 <strong>O</strong> 键，然后按 a-z 可以将进程按照相应的列进行排序。而大写的 <strong>R</strong> 键可以将当前的排序倒转。</p></blockquote></blockquote></li></ol><h4 id="du-显示每个文件和目录的磁盘使用空间"><a href="#du-显示每个文件和目录的磁盘使用空间" class="headerlink" title="du 显示每个文件和目录的磁盘使用空间"></a>du 显示每个文件和目录的磁盘使用空间</h4><p>参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">-a, --all                              显示目录中个别文件的大小。<br>-B, --block-size=大小                  使用指定字节数的块<br>-b, --bytes                            显示目录或文件大小时，以byte为单位。<br>-c, --total                            除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。<br>-D, --dereference-args                 显示指定符号链接的源文件大小。<br>-H, --si                               与-h参数相同，但是K，M，G是以1000为换算单位。<br>-h, --human-readable                   以K，M，G为单位，提高信息的可读性。<br>-k, --kilobytes                        以KB(1024bytes)为单位输出。<br>-l, --count-links                      重复计算硬件链接的文件。<br>-m, --megabytes                        以MB为单位输出。<br>-L&lt;符号链接&gt;, --dereference&lt;符号链接&gt;  显示选项中所指定符号链接的源文件大小。<br>-P, --no-dereference                   不跟随任何符号链接(默认)<br>-0, --null                             将每个空行视作0 字节而非换行符<br>-S, --separate-dirs                    显示个别目录的大小时，并不含其子目录的大小。<br>-s, --summarize                        仅显示总计，只列出最后加总的值。<br>-x, --one-file-xystem                  以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。<br>-X&lt;文件&gt;, --exclude-from=&lt;文件&gt;        在&lt;文件&gt;指定目录或文件。<br>--apparent-size                        显示表面用量，而并非是磁盘用量；虽然表面用量通常会小一些，但有时它会因为稀疏文件间的&quot;洞&quot;、内部碎片、非直接引用的块等原因而变大。<br>--files0-from=F                        计算文件F中以NUL结尾的文件名对应占用的磁盘空间如果F的值是&quot;-&quot;，则从标准输入读入文件名<br>--exclude=&lt;目录或文件&gt;                 略过指定的目录或文件。<br>--max-depth=N                          显示目录总计(与--all 一起使用计算文件)当N为指定数值时计算深度为N，等于0时等同--summarize<br>--si                                   类似-h，但在计算时使用1000 为基底而非1024<br>--time                                 显示目录或该目录子目录下所有文件的最后修改时间<br>--time=WORD                            显示WORD时间，而非修改时间：atime，access，use，ctime 或status<br>--time-style=样式                      按照指定样式显示时间(样式解释规则同&quot;date&quot;命令)：full-iso，long-iso，iso，+FORMAT<br>--help                                 显示此帮助信息并退出<br>--version                              显示版本信息并退出<br></code></pre></td></tr></table></figure><p>实例</p><p>文件从大到小排序</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">ubuntu</span><span class="hljs-operator">@</span><span class="hljs-variable">VM</span><span class="hljs-operator">-</span><span class="hljs-number">0</span><span class="hljs-operator">-</span><span class="hljs-number">14</span><span class="hljs-operator">-</span><span class="hljs-variable">ubuntu</span><span class="hljs-operator">:~/</span><span class="hljs-variable">git</span><span class="hljs-operator">-</span><span class="hljs-variable">work</span><span class="hljs-operator">/</span><span class="hljs-variable">linux</span><span class="hljs-operator">-</span><span class="hljs-variable">command$</span> <span class="hljs-variable">du</span> <span class="hljs-operator">-</span><span class="hljs-variable">sh</span> <span class="hljs-operator">*</span> <span class="hljs-operator">|</span><span class="hljs-variable">sort</span> <span class="hljs-operator">-</span><span class="hljs-variable">rh</span><br><span class="hljs-number">2.9</span><span class="hljs-variable">M</span>    <span class="hljs-variable">command</span><br><span class="hljs-number">1.9</span><span class="hljs-variable">M</span>    <span class="hljs-variable">assets</span><br><span class="hljs-number">148</span><span class="hljs-built_in">K</span>    <span class="hljs-variable">template</span><br><span class="hljs-number">72</span><span class="hljs-built_in">K</span>     <span class="hljs-variable">package</span><span class="hljs-operator">-</span><span class="hljs-variable">lock</span><span class="hljs-operator">.</span><span class="hljs-variable">json</span><br><span class="hljs-number">52</span><span class="hljs-built_in">K</span>     <span class="hljs-variable">dist</span><br><span class="hljs-number">28</span><span class="hljs-built_in">K</span>     <span class="hljs-variable">build</span><br><span class="hljs-number">16</span><span class="hljs-built_in">K</span>     <span class="hljs-variable">README</span><span class="hljs-operator">.</span><span class="hljs-variable">md</span><br><span class="hljs-number">4.0</span><span class="hljs-built_in">K</span>    <span class="hljs-variable">renovate</span><span class="hljs-operator">.</span><span class="hljs-variable">json</span><br><span class="hljs-number">4.0</span><span class="hljs-built_in">K</span>    <span class="hljs-variable">package</span><span class="hljs-operator">.</span><span class="hljs-variable">json</span><br><span class="hljs-number">4.0</span><span class="hljs-built_in">K</span>    <span class="hljs-variable">LICENSE</span><br></code></pre></td></tr></table></figure><p>只显示当前目录下子目录的大小。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@VM-0-14-ubuntu:~/git-work/linux-command$ du -sh ./*/<br>1.9M    ./assets/<br>28K     ./build/<br>2.9M    ./command/<br>52K     ./dist/<br>148K    ./template/<br></code></pre></td></tr></table></figure><p>查看指定目录下文件所占的空间：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@VM-0-14-ubuntu:~/git-work/linux-command/assets$ du ./*<br>144     ./alfred.png<br>452     ./chrome-extensions.gif<br>4       ./dash-icon.png<br>1312    ./Linux.gif<br>16      ./qr.png<br></code></pre></td></tr></table></figure><p>只显示总和的大小:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@VM-0-14-ubuntu:~/git-work/linux-command/assets$ du -s .<br>1932    .<br></code></pre></td></tr></table></figure><p>显示总和的大小且易读:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@VM-0-14-ubuntu:~/git-work/linux-command/assets$ du -sh .<br>1.9M    .<br></code></pre></td></tr></table></figure><h4 id="df-显示磁盘的相关信息"><a href="#df-显示磁盘的相关信息" class="headerlink" title="df  显示磁盘的相关信息"></a>df  显示磁盘的相关信息</h4><p>参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">-a或--all：包含全部的文件系统；<br>--block-size=&lt;区块大小&gt;：以指定的区块大小来显示区块数目；<br>-h或--human-readable：以可读性较高的方式来显示信息；<br>-H或--si：与-h参数相同，但在计算时是以1000 Bytes为换算单位而非1024 Bytes；<br>-i或--inodes：显示inode的信息；<br>-k或--kilobytes：指定区块大小为1024字节；<br>-l或--local：仅显示本地端的文件系统；<br>-m或--megabytes：指定区块大小为1048576字节；<br>--no-sync：在取得磁盘使用信息前，不要执行sync指令，此为预设值；<br>-P或--portability：使用POSIX的输出格式；<br>--sync：在取得磁盘使用信息前，先执行sync指令；<br>-t&lt;文件系统类型&gt;或--type=&lt;文件系统类型&gt;：仅显示指定文件系统类型的磁盘信息；<br>-T或--print-type：显示文件系统的类型；<br>-x&lt;文件系统类型&gt;或--exclude-type=&lt;文件系统类型&gt;：不要显示指定文件系统类型的磁盘信息；<br>--help：显示帮助；<br></code></pre></td></tr></table></figure><p>大小格式</p><p>显示值以 <code>--block-size</code> 和 <code>DF_BLOCK_SIZE</code>，<code>BLOCK_SIZE</code> 和 <code>BLOCKSIZE</code> 环境变量中的第一个可用 <code>SIZE</code> 为单位。 否则，单位默认为 <code>1024</code> 个字节（如果设置 <code>POSIXLY_CORRECT</code>，则为<code>512</code>）。</p><p>SIZE是一个整数和可选单位（例如：10M是10 * 1024 * 1024）。 单位是K，M，G，T，P，E，Z，Y（1024的幂）或KB，MB，…（1000的幂）。</p><p>实例</p><p>查看系统磁盘设备，默认是KB为单位：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@LinServ-1 ~]# df<br>文件系统               1K-块        已用     可用 已用% 挂载点<br>/dev/sda2            146294492  28244432 110498708  21% /<br>/dev/sda1              1019208     62360    904240   7% /boot<br>tmpfs                  1032204         0   1032204   0% /dev/shm<br>/dev/sdb1            2884284108 218826068 2518944764   8% /data1<br></code></pre></td></tr></table></figure><p>使用<code>-h</code>选项以KB以上的单位来显示，可读性高：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@LinServ-1 ~]# df -h<br>文件系统              容量  已用 可用 已用% 挂载点<br>/dev/sda2             140G   27G  106G  21% /<br>/dev/sda1             996M   61M  884M   7% /boot<br>tmpfs                1009M     0 1009M   0% /dev/shm<br>/dev/sdb1             2.7T  209G  2.4T   8% /data1<br></code></pre></td></tr></table></figure><p>查看全部文件系统：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@LinServ-1 ~]# df -a<br>文件系统               1K-块        已用     可用 已用% 挂载点<br>/dev/sda2            146294492  28244432 110498708  21% /<br>proc                         0         0         0   -  /proc<br>sysfs                        0         0         0   -  /sys<br>devpts                       0         0         0   -  /dev/pts<br>/dev/sda1              1019208     62360    904240   7% /boot<br>tmpfs                  1032204         0   1032204   0% /dev/shm<br>/dev/sdb1            2884284108 218826068 2518944764   8% /data1<br>none                         0         0         0   -  /proc/sys/fs/binfmt_misc<br></code></pre></td></tr></table></figure><p>显示 <code>public</code> 目录中的可用空间量，如以下输出中所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">df public<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Filesystem     1K-blocks     Used Available Use% Mounted on</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">/dev/loop0      18761008 15246924   2554392  86% /d Avail</span><br></code></pre></td></tr></table></figure><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><h4 id="ps-报告当前系统的进程状态"><a href="#ps-报告当前系统的进程状态" class="headerlink" title="ps  报告当前系统的进程状态"></a>ps  报告当前系统的进程状态</h4><p>参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs shell">-a：显示所有终端机下执行的程序，除了阶段作业领导者之外。<br>a：显示现行终端机下的所有程序，包括其他用户的程序。<br>-A：显示所有程序。<br>-c：显示CLS和PRI栏位。<br>c：列出程序时，显示每个程序真正的指令名称，而不包含路径，选项或常驻服务的标示。<br>-C&lt;指令名称&gt;：指定执行指令的名称，并列出该指令的程序的状况。<br>-d：显示所有程序，但不包括阶段作业领导者的程序。<br>-e：此选项的效果和指定&quot;A&quot;选项相同。<br>e：列出程序时，显示每个程序所使用的环境变量。<br>-f：显示UID,PPIP,C与STIME栏位。<br>f：用ASCII字符显示树状结构，表达程序间的相互关系。<br>-g&lt;群组名称&gt;：此选项的效果和指定&quot;-G&quot;选项相同，当亦能使用阶段作业领导者的名称来指定。<br>g：显示现行终端机下的所有程序，包括群组领导者的程序。<br>-G&lt;群组识别码&gt;：列出属于该群组的程序的状况，也可使用群组名称来指定。<br>h：不显示标题列。<br>-H：显示树状结构，表示程序间的相互关系。<br>-j或j：采用工作控制的格式显示程序状况。<br>-l或l：采用详细的格式来显示程序状况。<br>L：列出栏位的相关信息。<br>-m或m：显示所有的执行绪。<br>n：以数字来表示USER和WCHAN栏位。<br>-N：显示所有的程序，除了执行ps指令终端机下的程序之外。<br>-p&lt;程序识别码&gt;：指定程序识别码，并列出该程序的状况。<br>p&lt;程序识别码&gt;：此选项的效果和指定&quot;-p&quot;选项相同，只在列表格式方面稍有差异。<br>r：只列出现行终端机正在执行中的程序。<br>-s&lt;阶段作业&gt;：指定阶段作业的程序识别码，并列出隶属该阶段作业的程序的状况。<br>s：采用程序信号的格式显示程序状况。<br>S：列出程序时，包括已中断的子程序资料。<br>-t&lt;终端机编号&gt;：指定终端机编号，并列出属于该终端机的程序的状况。<br>t&lt;终端机编号&gt;：此选项的效果和指定&quot;-t&quot;选项相同，只在列表格式方面稍有差异。<br>-T：显示现行终端机下的所有程序。<br>-u&lt;用户识别码&gt;：此选项的效果和指定&quot;-U&quot;选项相同。<br>u：以用户为主的格式来显示程序状况。<br>-U&lt;用户识别码&gt;：列出属于该用户的程序的状况，也可使用用户名称来指定。<br>U&lt;用户名称&gt;：列出属于该用户的程序的状况。<br>v：采用虚拟内存的格式显示程序状况。<br>-V或V：显示版本信息。<br>-w或w：采用宽阔的格式来显示程序状况。　<br>x：显示所有程序，不以终端机来区分。<br>X：采用旧式的Linux i386登陆格式显示程序状况。<br>-y：配合选项&quot;-l&quot;使用时，不显示F(flag)栏位，并以RSS栏位取代ADDR栏位　。<br>-&lt;程序识别码&gt;：此选项的效果和指定&quot;p&quot;选项相同。<br>--cols&lt;每列字符数&gt;：设置每列的最大字符数。<br>--columns&lt;每列字符数&gt;：此选项的效果和指定&quot;--cols&quot;选项相同。<br>--cumulative：此选项的效果和指定&quot;S&quot;选项相同。<br>--deselect：此选项的效果和指定&quot;-N&quot;选项相同。<br>--forest：此选项的效果和指定&quot;f&quot;选项相同。<br>--headers：重复显示标题列。<br>--help：在线帮助。<br>--info：显示排错信息。<br>--lines&lt;显示列数&gt;：设置显示画面的列数。<br>--no-headers：此选项的效果和指定&quot;h&quot;选项相同，只在列表格式方面稍有差异。<br>--group&lt;群组名称&gt;：此选项的效果和指定&quot;-G&quot;选项相同。<br>--Group&lt;群组识别码&gt;：此选项的效果和指定&quot;-G&quot;选项相同。<br>--pid&lt;程序识别码&gt;：此选项的效果和指定&quot;-p&quot;选项相同。<br>--rows&lt;显示列数&gt;：此选项的效果和指定&quot;--lines&quot;选项相同。<br>--sid&lt;阶段作业&gt;：此选项的效果和指定&quot;-s&quot;选项相同。<br>--tty&lt;终端机编号&gt;：此选项的效果和指定&quot;-t&quot;选项相同。<br>--user&lt;用户名称&gt;：此选项的效果和指定&quot;-U&quot;选项相同。<br>--User&lt;用户识别码&gt;：此选项的效果和指定&quot;-U&quot;选项相同。<br>--version：此选项的效果和指定&quot;-V&quot;选项相同。<br>--widty&lt;每列字符数&gt;：此选项的效果和指定&quot;-cols&quot;选项相同。<br></code></pre></td></tr></table></figure><p>实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps axo pid,comm,pcpu # 查看进程的PID、名称以及CPU 占用率<br>ps aux | sort -rnk 4 # 按内存资源的使用量对进程进行排序<br>ps aux | sort -nk 3  # 按 CPU 资源的使用量对进程进行排序<br>ps -A # 显示所有进程信息<br>ps -u root # 显示指定用户信息<br>ps -efL # 查看线程数<br>ps -e -o &quot;%C : %p :%z : %a&quot;|sort -k5 -nr # 查看进程并按内存使用大小排列<br>ps -ef # 显示所有进程信息，连同命令行<br>ps -ef | grep ssh # ps 与grep 常用组合用法，查找特定进程<br>ps -C nginx # 通过名字或命令搜索进程<br>ps aux --sort=-pcpu,+pmem # CPU或者内存进行排序,-降序，+升序<br>ps -f --forest -C nginx # 用树的风格显示进程的层次关系<br>ps -o pid,uname,comm -C nginx # 显示一个父进程的子进程<br>ps -e -o pid,uname=USERNAME,pcpu=CPU_USAGE,pmem,comm # 重定义标签<br>ps -e -o pid,comm,etime # 显示进程运行的时间<br>ps -aux | grep named # 查看named进程详细信息<br>ps -o command -p 91730 | sed -n 2p # 通过进程id获取服务名称<br></code></pre></td></tr></table></figure><p>将目前属于您自己这次登入的 PID 与相关信息列示出来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -l<br><span class="hljs-meta prompt_"># </span><span class="language-bash"> UID   PID  PPID        F CPU PRI NI       SZ    RSS WCHAN     S             ADDR TTY           TIME CMD</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> 501   566   559     4006   0  31  0  4317620    228 -      Ss                  0 ttys001    0:00.05 /App...cOS/iTerm2 --server /usr/bin/login -fpl kenny /Ap...s/MacOS/iTerm2 --launch_shel</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> 501   592   577     4006   0  31  0  4297048     52 -      S                   0 ttys001    0:00.63 -zsh</span><br></code></pre></td></tr></table></figure><ul><li>F 代表这个程序的旗标 (flag)， 4 代表使用者为 super user</li><li>S 代表这个程序的状态 (STAT)，关于各 STAT 的意义将在内文介绍</li><li>UID 程序被该 UID 所拥有</li><li>PID 就是这个程序的 ID ！</li><li>PPID 则是其上级父程序的ID</li><li>C CPU 使用的资源百分比</li><li>PRI 这个是 Priority (优先执行序) 的缩写，详细后面介绍</li><li>NI 这个是 Nice 值，在下一小节我们会持续介绍</li><li>ADDR 这个是 kernel function，指出该程序在内存的那个部分。如果是个 running的程序，一般就是 “-“</li><li>SZ 使用掉的内存大小</li><li>WCHAN 目前这个程序是否正在运作当中，若为 - 表示正在运作</li><li>TTY 登入者的终端机位置</li><li>TIME 使用掉的 CPU 时间。</li><li>CMD 所下达的指令为何</li></ul><blockquote><p>在预设的情况下， <code>ps</code> 仅会列出与目前所在的 <code>bash shell</code> 有关的 <code>PID</code> 而已，所以， 当我使用 <code>ps -l</code> 的时候，只有三个 PID。</p></blockquote><p>列出目前所有的正在内存当中的程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps aux<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">USER               PID  %CPU %MEM      VSZ    RSS   TT  STAT STARTED      TIME COMMAND</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">kenny             6155  21.3  1.7  7969944 284912   ??  S    二03下午 199:14.14 /Appl...OS/WeChat</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">kenny              559  20.4  0.8  4963740 138176   ??  S    二03下午  33:28.27 /Appl...S/iTerm2</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">_windowserver      187  18.0  0.6  7005748  95884   ??  Ss   二03下午 288:44.97 /Syst...Light.WindowServer -daemon</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">kenny             1408  10.7  2.1  5838592 347348   ??  S    二03下午 138:51.63 /Appl...nts/MacOS/Google Chrome</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">kenny              327   5.8  0.5  5771984  79452   ??  S    二03下午   2:51.58 /Syst...pp/Contents/MacOS/Finder</span><br></code></pre></td></tr></table></figure><ul><li>USER：该 process 属于那个使用者账号的</li><li>PID ：该 process 的号码</li><li>%CPU：该 process 使用掉的 CPU 资源百分比</li><li>%MEM：该 process 所占用的物理内存百分比</li><li>VSZ ：该 process 使用掉的虚拟内存量 (Kbytes)</li><li>RSS ：该 process 占用的固定的内存量 (Kbytes)</li><li>TTY ：该 process 是在那个终端机上面运作，若与终端机无关，则显示 ?，另外， tty1-tty6 是本机上面的登入者程序，若为 pts&#x2F;0 等等的，则表示为由网络连接进主机的程序。</li><li>STAT：该程序目前的状态，主要的状态有</li><li>R ：该程序目前正在运作，或者是可被运作</li><li>S ：该程序目前正在睡眠当中 (可说是 idle 状态)，但可被某些讯号 (signal) 唤醒。</li><li>T ：该程序目前正在侦测或者是停止了</li><li>Z ：该程序应该已经终止，但是其父程序却无法正常的终止他，造成 zombie (疆尸) 程序的状态</li><li>START：该 process 被触发启动的时间</li><li>TIME ：该 process 实际使用 CPU 运作的时间</li><li>COMMAND：该程序的实际指令</li></ul><p>列出类似程序树的程序显示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -axjf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">USER               PID  PPID  PGID   SESS JOBC STAT   TT       TIME COMMAND            UID   C STIME   TTY</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">root                 1     0     1      0    0 Ss     ??   10:51.90 /sbin/launchd        0   0 二03下午 ??</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">root                50     1    50      0    0 Ss     ??    0:10.07 /usr/sbin/syslog     0   0 二03下午 ??</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">root                51     1    51      0    0 Ss     ??    0:29.90 /usr/libexec/Use     0   0 二03下午 ??</span><br></code></pre></td></tr></table></figure><p>找出与 cron 与 syslog 这两个服务有关的 PID 号码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps aux | egrep &#x27;(cron|syslog)&#x27;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">root                50   0.0  0.0  4305532   1284   ??  Ss   二03下午   0:10.08 /usr/sbin/syslogd</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">kenny            90167   0.0  0.0  4258468    184 s007  R+    9:23下午   0:00.00 egrep (cron|syslog)</span><br></code></pre></td></tr></table></figure><p>把所有进程显示出来，并输出到ps001.txt文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -aux &gt; ps001.txt<br></code></pre></td></tr></table></figure><p>输出指定的字段</p><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><h4 id="netstat-查看Linux中网络系统状态信息"><a href="#netstat-查看Linux中网络系统状态信息" class="headerlink" title="netstat  查看Linux中网络系统状态信息"></a>netstat  查看Linux中网络系统状态信息</h4><p>参数</p><blockquote><p>提示：LISTEN和LISTENING的状态只有用-a或者-l才能看到</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">-a或--all：显示所有连线中的Socket；<br>-A&lt;网络类型&gt;或--&lt;网络类型&gt;：列出该网络类型连线中的相关地址；<br>-c或--continuous：持续列出网络状态；<br>-C或--cache：显示路由器配置的快取信息；<br>-e或--extend：显示网络其他相关信息；<br>-F或--fib：显示FIB；<br>-g或--groups：显示多重广播功能群组组员名单；<br>-h或--help：在线帮助；<br>-i或--interfaces：显示网络界面信息表单；<br>-l或--listening：显示监控中的服务器的Socket；(仅列出有在 Listen (监听) 的服務状态)<br>-M或--masquerade：显示伪装的网络连线；<br>-n或--numeric：直接使用ip地址，而不通过域名服务器；<br>-N或--netlink或--symbolic：显示网络硬件外围设备的符号连接名称；<br>-o或--timers：显示计时器；<br>-p或--programs：显示正在使用Socket的程序识别码和程序名称；<br>-r或--route：显示Routing Table；<br>-s或--statistice：显示网络工作信息统计表；<br>-t或--tcp：显示TCP传输协议的连线状况；<br>-u或--udp：显示UDP传输协议的连线状况；<br>-v或--verbose：显示指令执行过程；<br>-V或--version：显示版本信息；<br>-w或--raw：显示RAW传输协议的连线状况；<br>-x或--unix：此参数的效果和指定&quot;-A unix&quot;参数相同；<br>--ip或--inet：此参数的效果和指定&quot;-A inet&quot;参数相同。<br></code></pre></td></tr></table></figure><p>实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -a<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">Active Internet connections (servers and established)<br>Proto Recv-Q Send-Q Local Address           Foreign Address         State<br>Active UNIX domain sockets (servers and established)<br>Proto RefCnt Flags       Type       State         I-Node   Path<br></code></pre></td></tr></table></figure><p>输出含义解析</p><ul><li><p>Proto</p><p>协议名（tcp协议还是udp协议)</p></li><li><p>Recv-Q</p><p>网络接收队列</p><p>表示收到的数据已经在本地接收缓冲，但是还有多少没有被进程取走，recv()<br><strong>如果接收队列Recv-Q一直处于阻塞状态，可能是遭受了拒绝服务 denial-of-service 攻击。</strong></p></li><li><p>Send-Q</p><p>网路发送队列</p><p>对方没有收到的数据或者说没有Ack的,还是本地缓冲区.<br>如果发送队列Send-Q不能很快的清零，可能是有应用向外发送数据包过快，或者是对方接收数据包不够快。</p></li></ul><blockquote><p><strong>这两个值通常应该为0，如果不为0可能是有问题的。packets在两个队列里都不应该有堆积状态。可接受短暂的非0情况。</strong></p><p><strong>从步骤一的结果中可以看到22端口对应的链路的 send-Q中堆积了大量的数据包 ,可以判定是发送数据给目的地址的时候出现了阻塞的问题，导致了包堆积在本地缓存中，不能成功发出去。</strong></p><p>上述两个输出信息的具体解析，区分<code>Listen</code>和 <code>非Listen</code></p><blockquote><ul><li><strong>LISTEN 状态</strong>：<code>Recv-Q</code> 表示当前 listen backlog 队列中的<strong>连接数目</strong>（等待用户调用 <code>accept()</code> 获取的、已完成 3 次握手的 socket 连接数量），而 <code>Send-Q</code> 表示了 listen socket 最大能容纳的 backlog ，即 <code>min(backlog, somaxconn)</code> 值。</li><li>非 LISTEN 状态：<code>Recv-Q</code> 表示了 receive queue 中存在的字节数目；<code>Send-Q</code> 表示 send queue 中存在的字节数；</li></ul></blockquote></blockquote><ul><li><p>Local Address  </p><ol><li>Local Address 部分的0.0.0.0:22 表示监听服务器上所有ip地址的所有(0.0.0.0表示本地所有ip)，比如你的服务器是有172.172.230.210和<br>172.172.230.11两个ip地址，那么0.0.0.0:22此时表示监听172.172.230.210,172.172.230.211,127.0.0.1三个地址的22端口</li><li>:::22 这个也表示监听本地所有ip的22端口，跟上面的区别是这里表示的是IPv6地址，上面的0.0.0.0表示的是本地所有IPv4地址<br>NOTE<br>“:::” 这三个: 的前两个”::”，是”0:0:0:0:0:0:0:0”的缩写，相当于IPv6的”0.0.0.0”，就是本机的所有IPv6地址，第三个:是IP和端口的分隔符</li><li>127.0.0.1:631 这个表示监听本机的loopback地址的631端口(如果某个服务只监听了回环地址，那么只能在本机进行访问，无法通过tcp&#x2F;ip 协议进行远程访问)</li><li>::1:631 这个表示监听IPv6的回环地址的631端口,::1这个表示IPv6的loopback地址</li><li>172.172.230.211:3306 这里我们看到我们的mysqld进程监听的是172.172.230.211的3306端口,这是因为我们在启动的时候指定了bind_address&#x3D;172.172.230.211参数，如果不指定bind_address的话，mysqld默认监听:::3306(本机所有ip地址的3306端口 -IPv6)</li></ol></li><li><p>Foreign Address </p><p>与本机端口通信的外部socket。显示规则与Local Address相同</p></li><li><p>State</p><p>链路状态，共有11种<br>state列共有12中可能的状态，前面11种是按照TCP连接建立的三次握手和TCP连接断开的四次挥手过程来描述的。</p><table><thead><tr><th>状态</th><th>描述</th></tr></thead><tbody><tr><td>LISTEN</td><td>首先服务端需要打开一个socket进行监听，状态为LISTEN.&#x2F;* The socket is listening for incoming connections. 侦听来自远方TCP端口的连接请求 *&#x2F;</td></tr><tr><td>SYN_SENT</td><td>客户端通过应用程序调用connect进行active open.于是客户端tcp发送一个SYN以请求建立一个连接.之后状态置为SYN_SENT.&#x2F;*The socket is actively attempting to establish a connection. 在发送连接请求后等待匹配的连接请求 *&#x2F;</td></tr><tr><td>SYN_RECV</td><td>服务端应发出ACK确认客户端的 SYN,同时自己向客户端发送一个SYN. 之后状态置为SYN_RECV&#x2F;* A connection request has been received from the network. 在收到和发送一个连接请求后等待对连接请求的确认 *&#x2F;</td></tr><tr><td>ESTABLISHED</td><td>代表一个打开的连接，双方可以进行或已经在数据交互了。&#x2F;* The socket has an established connection. 代表一个打开的连接，数据可以传送给用户 *&#x2F;</td></tr><tr><td>FIN_WAIT1</td><td>主动关闭(active close)端应用程序调用close，于是其TCP发出FIN请求主动关闭连接，之后进入FIN_WAIT1状态.&#x2F;* The socket is closed, and the connection is shutting down. 等待远程TCP的连接中断请求，或先前的连接中断请求的确认 *&#x2F;</td></tr><tr><td>CLOSE_WAIT</td><td>被动关闭(passive close)端TCP接到FIN后，就发出ACK以回应FIN请求(它的接收也作为文件结束符传递给上层应用程序),并进入CLOSE_WAIT.&#x2F;* The remote end has shut down, waiting for the socket to close. 等待从本地用户发来的连接中断请求 *&#x2F;</td></tr><tr><td>FIN_WAIT2</td><td>主动关闭端接到ACK后，就进入了 FIN-WAIT-2 .&#x2F;* Connection is closed, and the socket is waiting for a shutdown from the remote end. 从远程TCP等待连接中断请求 *&#x2F;</td></tr><tr><td>LAST_ACK</td><td>被动关闭端一段时间后，接收到文件结束符的应用程 序将调用CLOSE关闭连接。这导致它的TCP也发送一个 FIN,等待对方的ACK.就进入了LAST-ACK .&#x2F;* The remote end has shut down, and the socket is closed. Waiting for acknowledgement. 等待原来发向远程TCP的连接中断请求的确认 *&#x2F;</td></tr><tr><td>TIME_WAIT</td><td>在主动关闭端接收到FIN后，TCP 就发送ACK包，并进入TIME-WAIT状态。&#x2F;* The socket is waiting after close to handle packets still in the network.等待足够的时间以确保远程TCP接收到连接中断请求的确认 *&#x2F;</td></tr><tr><td>CLOSING</td><td>比较少见.&#x2F;* Both sockets are shut down but we still don’t have all our data sent. 等待远程TCP对连接中断的确认 *&#x2F;</td></tr><tr><td>CLOSED</td><td>被动关闭端在接受到ACK包后，就进入了closed的状态。连接结束.&#x2F;* The socket is not being used. 没有任何连接状态 *&#x2F;</td></tr><tr><td>UNKNOWN</td><td>未知的Socket状态。&#x2F;* The state of the socket is unknown. *&#x2F;</td></tr></tbody></table><p>备注</p><blockquote><p><strong>PS</strong></p><p>SYN: (同步序列编号,Synchronize Sequence Numbers)该标志仅在三次握手建立TCP连接时有效。表示一个新的TCP连接请求。<br>ACK: (确认编号,Acknowledgement Number)是对TCP请求的确认标志,同时提示对端系统已经成功接收所有数据。<br>FIN: (结束标志,FINish)用来结束一个TCP回话.但对应端口仍处于开放状态,准备接收后续数据。</p></blockquote></li><li><p>PID</p><p>PID即进程id，Program即使用该socket的应用程序</p></li></ul><p>实例</p><p><strong>列出所有端口 (包括监听和未监听的)</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -a     #列出所有端口<br>netstat -at    #列出所有tcp端口<br>netstat -au    #列出所有udp端口                             <br></code></pre></td></tr></table></figure><p><strong>列出所有处于监听状态的 Sockets</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -l        #只显示监听端口<br>netstat -lt       #只列出所有监听 tcp 端口<br>netstat -lu       #只列出所有监听 udp 端口<br>netstat -lx       #只列出所有监听 UNIX 端口<br></code></pre></td></tr></table></figure><p><strong>显示每个协议的统计信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -s   显示所有端口的统计信息<br>netstat -st   显示TCP端口的统计信息<br>netstat -su   显示UDP端口的统计信息<br><br>```shell<br><br> **在netstat输出中显示 PID 和进程名称** <br><br>```shell<br>netstat -pt<br></code></pre></td></tr></table></figure><p><code>netstat -p</code>可以与其它开关一起使用，就可以添加“PID&#x2F;进程名称”到netstat输出中，这样debugging的时候可以很方便的发现特定端口运行的程序。</p><p><strong>在netstat输出中不显示主机，端口和用户名(host, port or user)</strong></p><p>当你不想让主机，端口和用户名显示，使用<code>netstat -n</code>。将会使用数字代替那些名称。同样可以加速输出，因为不用进行比对查询。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -an<br></code></pre></td></tr></table></figure><p>如果只是不想让这三个名称中的一个被显示，使用以下命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">netsat -a --numeric-ports<br>netsat -a --numeric-hosts<br>netsat -a --numeric-users<br></code></pre></td></tr></table></figure><p><strong>持续输出netstat信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -c   #每隔一秒输出网络信息<br></code></pre></td></tr></table></figure><p><strong>显示系统不支持的地址族(Address Families)</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat --verbose<br></code></pre></td></tr></table></figure><p>在输出的末尾，会有如下的信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat: no support for `AF IPX&#x27; on this system.<br>netstat: no support for `AF AX25&#x27; on this system.<br>netstat: no support for `AF X25&#x27; on this system.<br>netstat: no support for `AF NETROM&#x27; on this system.<br></code></pre></td></tr></table></figure><p><strong>显示核心路由信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -r<br></code></pre></td></tr></table></figure><p>使用<code>netstat -rn</code>显示数字格式，不查询主机名称。</p><p><strong>找出程序运行的端口</strong></p><p>并不是所有的进程都能找到，没有权限的会不显示，使用 root 权限查看所有的信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -ap | grep ssh<br></code></pre></td></tr></table></figure><p>找出运行在指定端口的进程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -an | grep &#x27;:80&#x27;<br></code></pre></td></tr></table></figure><p><strong>通过端口找进程ID</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">netstat -anp|grep 8081 | grep LISTEN|awk <span class="hljs-string">&#x27;&#123;printf $7&#125;&#x27;</span>|<span class="hljs-built_in">cut</span> -d/ -f1<br></code></pre></td></tr></table></figure><p><strong>显示网络接口列表</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -i<br></code></pre></td></tr></table></figure><p>显示详细信息，像是ifconfig使用<code>netstat -ie</code>。</p><p><strong>IP和TCP分析</strong></p><p>查看连接某服务端口最多的的IP地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -ntu | grep :80 | awk &#x27;&#123;print $5&#125;&#x27; | cut -d: -f1 | awk &#x27;&#123;++ip[$1]&#125; END &#123;for(i in ip) print ip[i],&quot;\t&quot;,i&#125;&#x27; | sort -nr<br></code></pre></td></tr></table></figure><p>TCP各种状态列表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -nt | grep -e 127.0.0.1 -e 0.0.0.0 -e ::: -v | awk &#x27;/^tcp/ &#123;++state[$NF]&#125; END &#123;for(i in state) print i,&quot;\t&quot;,state[i]&#125;&#x27;<br></code></pre></td></tr></table></figure><p>查看phpcgi进程数，如果接近预设值，说明不够用，需要增加：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -anpo | grep &quot;php-cgi&quot; | wc -l<br></code></pre></td></tr></table></figure><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><h4 id="lsof-list-open-files-个列出当前系统打开文件的工具"><a href="#lsof-list-open-files-个列出当前系统打开文件的工具" class="headerlink" title="lsof(list open files)  个列出当前系统打开文件的工具"></a>lsof(list open files)  个列出当前系统打开文件的工具</h4><p>参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">-a：列出打开文件存在的进程；<br>-c&lt;进程名&gt;：列出指定进程所打开的文件；<br>-g：列出GID号进程详情；<br>-d&lt;文件号&gt;：列出占用该文件号的进程；<br>+d&lt;目录&gt;：列出目录下被打开的文件；<br>+D&lt;目录&gt;：递归列出目录下被打开的文件；<br>-n&lt;目录&gt;：列出使用NFS的文件；<br>-i&lt;条件&gt;：列出符合条件的进程（协议、:端口、 @ip ）<br>-p&lt;进程号&gt;：列出指定进程号所打开的文件；<br>-u：列出UID号进程详情；<br>-h：显示帮助信息；<br>-v：显示版本信息<br></code></pre></td></tr></table></figure><p>实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">lsof<br>command     PID USER   FD      type             DEVICE     SIZE       NODE NAME<br>init          1 root  cwd       DIR                8,2     4096          2 /<br>init          1 root  rtd       DIR                8,2     4096          2 /<br>init          1 root  txt       REG                8,2    43496    6121706 /sbin/init<br>init          1 root  mem       REG                8,2   143600    7823908 /lib64/ld-2.5.so<br>init          1 root  mem       REG                8,2  1722304    7823915 /lib64/libc-2.5.so<br>init          1 root  mem       REG                8,2    23360    7823919 /lib64/libdl-2.5.so<br>init          1 root  mem       REG                8,2    95464    7824116 /lib64/libselinux.so.1<br>init          1 root  mem       REG                8,2   247496    7823947 /lib64/libsepol.so.1<br>init          1 root   10u     FIFO               0,17                1233 /dev/initctl<br>migration     2 root  cwd       DIR                8,2     4096          2 /<br>migration     2 root  rtd       DIR                8,2     4096          2 /<br>migration     2 root  txt   unknown                                        /proc/2/exe<br>ksoftirqd     3 root  cwd       DIR                8,2     4096          2 /<br>ksoftirqd     3 root  rtd       DIR                8,2     4096          2 /<br>ksoftirqd     3 root  txt   unknown                                        /proc/3/exe<br>migration     4 root  cwd       DIR                8,2     4096          2 /<br>migration     4 root  rtd       DIR                8,2     4096          2 /<br>migration     4 root  txt   unknown                                        /proc/4/exe<br>ksoftirqd     5 root  cwd       DIR                8,2     4096          2 /<br>ksoftirqd     5 root  rtd       DIR                8,2     4096          2 /<br>ksoftirqd     5 root  txt   unknown                                        /proc/5/exe<br>events/0      6 root  cwd       DIR                8,2     4096          2 /<br>events/0      6 root  rtd       DIR                8,2     4096          2 /<br>events/0      6 root  txt   unknown                                        /proc/6/exe<br>events/1      7 root  cwd       DIR                8,2     4096          2 /<br></code></pre></td></tr></table></figure><p><strong>lsof输出各列信息的意义如下：</strong></p><table><thead><tr><th>标识</th><th>说明</th></tr></thead><tbody><tr><td><code>COMMAND</code></td><td>进程的名称</td></tr><tr><td><code>PID</code></td><td>进程标识符</td></tr><tr><td><code>PPID</code></td><td>父进程标识符（需要指定-R参数）</td></tr><tr><td><code>USER</code></td><td>进程所有者</td></tr><tr><td><code>PGID</code></td><td>进程所属组</td></tr><tr><td><code>FD</code></td><td>文件描述符，应用程序通过它识别该文件</td></tr></tbody></table><p>文件描述符列表：</p><table><thead><tr><th>标识</th><th>说明</th></tr></thead><tbody><tr><td><code>cwd</code></td><td>表示当前工作目录，即：应用程序的当前工作目录，这是该应用程序启动的目录，除非它本身对这个目录进行更改</td></tr><tr><td><code>txt</code></td><td>该类型的文件是程序代码，如应用程序二进制文件本身或共享库，如上列表中显示的 &#x2F;sbin&#x2F;init 程序</td></tr><tr><td><code>lnn</code></td><td>库引用 (AIX);</td></tr><tr><td><code>er</code></td><td>FD 信息错误（参见名称栏）</td></tr><tr><td><code>jld</code></td><td>jail 目录 (FreeBSD);</td></tr><tr><td><code>ltx</code></td><td>共享库文本（代码和数据）</td></tr><tr><td><code>mxx</code></td><td>十六进制内存映射类型编号xx</td></tr><tr><td><code>m86</code></td><td>DOS合并映射文件</td></tr><tr><td><code>mem</code></td><td>内存映射文件</td></tr><tr><td><code>mmap</code></td><td>内存映射设备</td></tr><tr><td><code>pd</code></td><td>父目录</td></tr><tr><td><code>rtd</code></td><td>根目录</td></tr><tr><td><code>tr</code></td><td>内核跟踪文件 (OpenBSD)</td></tr><tr><td><code>v86</code></td><td>VP&#x2F;ix 映射文件</td></tr><tr><td><code>0</code></td><td>表示标准输出</td></tr><tr><td><code>1</code></td><td>表示标准输入</td></tr><tr><td><code>2</code></td><td>表示标准错误</td></tr></tbody></table><p>一般在标准输出、标准错误、标准输入后还跟着文件状态模式：</p><table><thead><tr><th>标识</th><th>说明</th></tr></thead><tbody><tr><td><code>u</code></td><td>表示该文件被打开并处于读取&#x2F;写入模式</td></tr><tr><td><code>r</code></td><td>表示该文件被打开并处于只读模式</td></tr><tr><td><code>w</code></td><td>表示该文件被打开并处于写入模式</td></tr><tr><td><code>空格</code></td><td>表示该文件的状态模式为 unknow，且没有锁定</td></tr><tr><td><code>-</code></td><td>表示该文件的状态模式为 unknow，且被锁定</td></tr></tbody></table><p>同时在文件状态模式后面，还跟着相关的锁：</p><table><thead><tr><th>标识</th><th>说明</th></tr></thead><tbody><tr><td><code>N</code></td><td>对于未知类型的Solaris NFS锁</td></tr><tr><td><code>r</code></td><td>用于部分文件的读取锁定</td></tr><tr><td><code>R</code></td><td>对整个文件进行读取锁定</td></tr><tr><td><code>w</code></td><td>对文件的一部分进行写锁定(文件的部分写锁)</td></tr><tr><td><code>W</code></td><td>对整个文件进行写锁定(整个文件的写锁)</td></tr><tr><td><code>u</code></td><td>用于任何长度的读写锁</td></tr><tr><td><code>U</code></td><td>对于未知类型的锁</td></tr><tr><td><code>x</code></td><td>对于文件部分的SCO OpenServer Xenix锁</td></tr><tr><td><code>X</code></td><td>对于整个文件的SCO OpenServer Xenix锁</td></tr><tr><td><code>space</code></td><td>如果没有锁</td></tr></tbody></table><p><strong>文件类型</strong></p><table><thead><tr><th>标识</th><th>说明</th></tr></thead><tbody><tr><td><code>DIR</code></td><td>表示目录</td></tr><tr><td><code>CHR</code></td><td>表示字符类型</td></tr><tr><td><code>BLK</code></td><td>块设备类型</td></tr><tr><td><code>UNIX</code></td><td>UNIX 域套接字</td></tr><tr><td><code>FIFO</code></td><td>先进先出 (FIFO) 队列</td></tr><tr><td><code>IPv4</code></td><td>网际协议 (IP) 套接字</td></tr><tr><td><code>DEVICE</code></td><td>指定磁盘的名称</td></tr><tr><td><code>SIZE</code></td><td>文件的大小</td></tr><tr><td><code>NODE</code></td><td>索引节点（文件在磁盘上的标识）</td></tr><tr><td><code>NAME</code></td><td>打开文件的确切名称</td></tr><tr><td><code>REG</code></td><td>常规文件</td></tr></tbody></table><p>列出指定进程号所打开的文件:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">lsof -p $pid<br></code></pre></td></tr></table></figure><p>获取端口对应的进程ID&#x3D;&gt;pid</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">lsof -i:9981 -P -t -sTCP:LISTEN<br></code></pre></td></tr></table></figure><p>列出打开文件的进程:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">lsof $filename<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux命令</category>
      
      <category>异常排查</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux命令 - 异常排查</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代理模式</title>
    <link href="/2022/11/27/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/11/27/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在日常工作中，蛮常见的一种设计模式。<strong>例如：Nginx、Spring 事务、Mybatis中的statement等等的一些调用，都使用了进行设计</strong></p><p>代理就是让<code>proxy</code>对象去对<code>target</code>对象做相关调用代理，继而可以在相关<code>proxyMethod</code>方法中做一些自定义的操作同时，也能屏蔽<code>client</code>对<code>target</code>的实现细节的了解（<strong>个人看法</strong>）</p><blockquote><p><strong>网上观念</strong></p><p><strong>的主要作用是扩展目标对象的功能，比如说在目标对象的某个方法执行前后你可以增加一些自定义的操作。</strong></p><p><strong>百度百科</strong></p><p>的定义：为其他对象提供一种代理以控制对这个对象的访问。在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用</p></blockquote><p><img src="/2022/11/27/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.png" alt="代理模式"></p><p>在实际上，有如下几种代理方式（主要以Java作为讨论）</p><ul><li>静态代理（基于设计模式的实现）</li><li>动态代理（基于运行时进行处理，会生成含有<code>$*.class</code>的代理对象）</li></ul><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>静态代理是基于代码层面，使用设计模式去进行实现的</p><p><strong>实现原理</strong></p><p>通过使用<code>Proxy</code>对象去屏蔽相关<code>Target</code>对象调用</p><p><strong>举个栗子</strong>（后续的也基于这个栗子来举吧）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> proxy.service.impl;<br><br><span class="hljs-keyword">import</span> proxy.service.ProxyService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> TanLinRu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021.10.14</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ProxyService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">proxyMethod</span><span class="hljs-params">(Object object)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;the method has proxied&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> proxy.service.impl;<br><br><span class="hljs-keyword">import</span> proxy.service.ProxyService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> TanLinRu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021.10.14</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ProxyService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">proxyMethod</span><span class="hljs-params">(Object object)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;the method has proxied&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>静态代理实现简单且不侵入原代码，<strong>但当场景复杂时，静态代理会有以下缺点</strong></p><p><strong>缺点：</strong></p><ol><li>当需要代理多个类时，代理对象要实现与目标对象一致的接口。要么，只维护一个代理类来实现多个接口，但这样会导致代理类过于庞大。要么，新建多个代理类，但这样会产生过多的代理类。</li><li>当接口需要增加、删除、修改方法时，目标对象与代理类都要同时修改，不易维护。</li></ol><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>在对于上述<code>静态代理</code>中所存在的问题，动态代理便因此而生</p><p><strong>动态代理是指代理类在程序运行时进行创建的代理方式。这种情况下，代理类并不是在Java代码中定义的，而是在运行时根据Java代码中的“指令”动态生成的。</strong></p><p><strong>相比于静态代理，动态代理的优势在于可以很方便的对代理类的函数进行统一的处理，而不用修改每个代理类的函数。</strong></p><p>动态代理实现的方式比较多</p><ul><li><p>JDK</p><p>JAVA Proxy 基于接口进行动态代理</p></li><li><p>Cglib</p><p>Cglib是通过继承的方式进行代理，被代理对象不需要实现接口，<strong>但无法处理final的情况</strong></p></li></ul><p>在实际上，动态代理实现方式比较多，本文以<code>JDK</code>和<code>Cglib</code>来进行实现</p><p><strong>JDK动态</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> proxy.test;<br><br><span class="hljs-keyword">import</span> com.sun.xml.internal.messaging.saaj.util.ByteOutputStream;<br><span class="hljs-keyword">import</span> proxy.service.ProxyService;<br><span class="hljs-keyword">import</span> proxy.service.impl.ProxyServiceImpl;<br><span class="hljs-keyword">import</span> domain.User;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JDK proxy</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> TanLinRu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021.10.14</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DebugProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Object object;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成代理实例</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> object</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">newInstance</span><span class="hljs-params">(Object object)</span> &#123;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(object.getClass().getClassLoader(),<br>                                      object.getClass().getInterfaces(),<br>                                      <span class="hljs-keyword">new</span> <span class="hljs-title class_">DebugProxy</span>(object));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DebugProxy</span><span class="hljs-params">(Object object)</span> &#123;<br>        <span class="hljs-built_in">this</span>.object = object;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        Object result;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;before method &quot;</span> + method.getName());<br>            result = method.invoke(object, args);<br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>            <span class="hljs-keyword">throw</span> e.getTargetException();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;unexpected invocation exception: &quot;</span> +<br>                                       e.getMessage());<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;after method &quot;</span> + method.getName());<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ProxyService</span> <span class="hljs-variable">proxyService</span> <span class="hljs-operator">=</span> (ProxyService) DebugProxy.newInstance(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyServiceImpl</span>());<br>        System.out.println(proxyService.getClass());<br>        proxyService.proxyMethod(<span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">traverse</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (value == <span class="hljs-number">2000</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        traverse(value+<span class="hljs-number">1</span>);<br>        System.out.println(value);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>Cglib动态</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> proxy.test;<br><br><span class="hljs-keyword">import</span> net.sf.cglib.proxy.Enhancer;<br><span class="hljs-keyword">import</span> proxy.cglib.CglibInterceptor;<br><span class="hljs-keyword">import</span> proxy.service.ProxyService;<br><span class="hljs-keyword">import</span> proxy.service.impl.ProxyServiceImpl;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * cglib反射测试</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> TanLinRu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022-03-27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CglibProxy</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//创建大力对象增强器，可以对目标进行扩展</span><br>        <span class="hljs-type">Enhancer</span> <span class="hljs-variable">enhancer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Enhancer</span>();<br>        <span class="hljs-comment">//将目标对象设置为父类</span><br>        enhancer.setSuperclass(ProxyServiceImpl.class);<br>        <span class="hljs-comment">//设置目标拦截器</span><br>        enhancer.setCallback(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CglibInterceptor</span>());<br>        <span class="hljs-comment">//创建代理对象</span><br>        <span class="hljs-type">ProxyServiceImpl</span> <span class="hljs-variable">proxyService</span> <span class="hljs-operator">=</span> (ProxyServiceImpl) enhancer.create();<br>        <span class="hljs-comment">//通过代理对象调用目标方法</span><br>        proxyService.proxyMethod(<span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ul><li><p>动态代理实现了，但IDEA中没看到相关$proxy对象的生成</p><p>可通过环境变量来进行处理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># java动态代理持久化为.class文件配置方式</span></span><br>-Dsun.misc.ProxyGenerator.saveGeneratedFiles=true<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># cglib动态代理持久化为.class文件配置方式</span></span><br>-Dcglib.debugLocation=/Users/xxx<br></code></pre></td></tr></table></figure><p><img src="/2022/11/27/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/%E7%94%9F%E6%88%90%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1.png" alt="生成代理对象"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Source code recreated from a .class file by IntelliJ IDEA</span><br><span class="hljs-comment">// (powered by FernFlower decompiler)</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-keyword">package</span> proxy.service.impl;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> net.sf.cglib.core.Signature;<br><span class="hljs-keyword">import</span> net.sf.cglib.proxy.Callback;<br><span class="hljs-keyword">import</span> net.sf.cglib.reflect.FastClass;<br><span class="hljs-keyword">import</span> proxy.service.impl.ProxyServiceImpl..EnhancerByCGLIB..7be472d8;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyServiceImpl$$EnhancerByCGLIB$$7be472d8$$FastClassByCGLIB$$9f316d13</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FastClass</span> &#123;<br>    <span class="hljs-keyword">public</span> ProxyServiceImpl$$EnhancerByCGLIB$$7be472d8$$FastClassByCGLIB$$9f316d13(Class var1) &#123;<br>        <span class="hljs-built_in">super</span>(var1);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getIndex</span><span class="hljs-params">(Signature var1)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">var10000</span> <span class="hljs-operator">=</span> var1.toString();<br>        <span class="hljs-keyword">switch</span>(var10000.hashCode()) &#123;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">2055565910</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;CGLIB$SET_THREAD_CALLBACKS([Lnet/sf/cglib/proxy/Callback;)V&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">11</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">1882565338</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;CGLIB$equals$1(Ljava/lang/Object;)Z&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">17</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">1457535688</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;CGLIB$STATICHOOK1()V&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">19</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">1411842725</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;CGLIB$hashCode$3()I&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">16</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">894172689</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;newInstance(Lnet/sf/cglib/proxy/Callback;)Ljava/lang/Object;&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">826936080</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;proxyMethod(Ljava/lang/Object;)Ljava/lang/Object;&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">8</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">623122092</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;CGLIB$findMethodProxy(Lnet/sf/cglib/core/Signature;)Lnet/sf/cglib/proxy/MethodProxy;&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">20</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">508378822</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;clone()Ljava/lang/Object;&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">419626537</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;setCallbacks([Lnet/sf/cglib/proxy/Callback;)V&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">9</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">504609561</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;CGLIB$proxyMethod$0(Ljava/lang/Object;)Ljava/lang/Object;&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">18</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">560567118</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;setCallback(ILnet/sf/cglib/proxy/Callback;)V&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">7</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">811063227</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;newInstance([Ljava/lang/Class;[Ljava/lang/Object;[Lnet/sf/cglib/proxy/Callback;)Ljava/lang/Object;&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">6</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">973717575</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;getCallbacks()[Lnet/sf/cglib/proxy/Callback;&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">12</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1221173700</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;newInstance([Lnet/sf/cglib/proxy/Callback;)Ljava/lang/Object;&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1230699260</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;getCallback(I)Lnet/sf/cglib/proxy/Callback;&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">13</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1306468936</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;CGLIB$toString$2()Ljava/lang/String;&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">14</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1584330438</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;CGLIB$SET_STATIC_CALLBACKS([Lnet/sf/cglib/proxy/Callback;)V&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1800494055</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;CGLIB$clone$4()Ljava/lang/Object;&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">15</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1826985398</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;equals(Ljava/lang/Object;)Z&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1913648695</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;toString()Ljava/lang/String;&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1984935277</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;hashCode()I&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getIndex</span><span class="hljs-params">(String var1, Class[] var2)</span> &#123;<br>        <span class="hljs-keyword">switch</span>(var1.hashCode()) &#123;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">1776922004</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;toString&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">1295482945</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;equals&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">if</span> (var2[<span class="hljs-number">0</span>].getName().equals(<span class="hljs-string">&quot;java.lang.Object&quot;</span>)) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">1053468136</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;getCallbacks&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">12</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">124978609</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;CGLIB$equals$1&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">if</span> (var2[<span class="hljs-number">0</span>].getName().equals(<span class="hljs-string">&quot;java.lang.Object&quot;</span>)) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">17</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">60403779</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;CGLIB$SET_STATIC_CALLBACKS&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">if</span> (var2[<span class="hljs-number">0</span>].getName().equals(<span class="hljs-string">&quot;[Lnet.sf.cglib.proxy.Callback;&quot;</span>)) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">29025555</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;CGLIB$hashCode$3&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">16</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">85179481</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;CGLIB$SET_THREAD_CALLBACKS&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">if</span> (var2[<span class="hljs-number">0</span>].getName().equals(<span class="hljs-string">&quot;[Lnet.sf.cglib.proxy.Callback;&quot;</span>)) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">11</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">94756189</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;clone&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">147696667</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;hashCode&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">161998109</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;CGLIB$STATICHOOK1&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">19</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">495524492</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;setCallbacks&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">if</span> (var2[<span class="hljs-number">0</span>].getName().equals(<span class="hljs-string">&quot;[Lnet.sf.cglib.proxy.Callback;&quot;</span>)) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">9</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1154623345</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;CGLIB$findMethodProxy&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">if</span> (var2[<span class="hljs-number">0</span>].getName().equals(<span class="hljs-string">&quot;net.sf.cglib.core.Signature&quot;</span>)) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">20</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1543336189</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;CGLIB$toString$2&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">14</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1621244376</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;CGLIB$proxyMethod$0&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">if</span> (var2[<span class="hljs-number">0</span>].getName().equals(<span class="hljs-string">&quot;java.lang.Object&quot;</span>)) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">18</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1811874389</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;newInstance&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">var10001</span> <span class="hljs-operator">=</span> var2[<span class="hljs-number">0</span>].getName();<br>                    <span class="hljs-keyword">switch</span>(var10001.hashCode()) &#123;<br>                    <span class="hljs-keyword">case</span> -<span class="hljs-number">845341380</span>:<br>                        <span class="hljs-keyword">if</span> (var10001.equals(<span class="hljs-string">&quot;net.sf.cglib.proxy.Callback&quot;</span>)) &#123;<br>                            <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>                        &#125;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">1730110032</span>:<br>                        <span class="hljs-keyword">if</span> (var10001.equals(<span class="hljs-string">&quot;[Lnet.sf.cglib.proxy.Callback;&quot;</span>)) &#123;<br>                            <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>;<br>                        &#125;<br>                    &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    <span class="hljs-keyword">if</span> (var2[<span class="hljs-number">0</span>].getName().equals(<span class="hljs-string">&quot;[Ljava.lang.Class;&quot;</span>) &amp;&amp; var2[<span class="hljs-number">1</span>].getName().equals(<span class="hljs-string">&quot;[Ljava.lang.Object;&quot;</span>) &amp;&amp; var2[<span class="hljs-number">2</span>].getName().equals(<span class="hljs-string">&quot;[Lnet.sf.cglib.proxy.Callback;&quot;</span>)) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">6</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1817099975</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;setCallback&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    <span class="hljs-keyword">if</span> (var2[<span class="hljs-number">0</span>].getName().equals(<span class="hljs-string">&quot;int&quot;</span>) &amp;&amp; var2[<span class="hljs-number">1</span>].getName().equals(<span class="hljs-string">&quot;net.sf.cglib.proxy.Callback&quot;</span>)) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">7</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1905679803</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;getCallback&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">if</span> (var2[<span class="hljs-number">0</span>].getName().equals(<span class="hljs-string">&quot;int&quot;</span>)) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">13</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1912110319</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;proxyMethod&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">if</span> (var2[<span class="hljs-number">0</span>].getName().equals(<span class="hljs-string">&quot;java.lang.Object&quot;</span>)) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">8</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1951977610</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;CGLIB$clone$4&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">15</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getIndex</span><span class="hljs-params">(Class[] var1)</span> &#123;<br>        <span class="hljs-keyword">switch</span>(var1.length) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(<span class="hljs-type">int</span> var1, Object var2, Object[] var3)</span> <span class="hljs-keyword">throws</span> InvocationTargetException &#123;<br>        7<span class="hljs-type">be472d8</span> <span class="hljs-variable">var10000</span> <span class="hljs-operator">=</span> (7be472d8)var2;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">var10001</span> <span class="hljs-operator">=</span> var1;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">switch</span>(var10001) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Boolean</span>(var10000.equals(var3[<span class="hljs-number">0</span>]));<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> var10000.toString();<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(var10000.hashCode());<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                <span class="hljs-keyword">return</span> var10000.clone();<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                <span class="hljs-keyword">return</span> var10000.newInstance((Callback)var3[<span class="hljs-number">0</span>]);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                <span class="hljs-keyword">return</span> var10000.newInstance((Callback[])var3[<span class="hljs-number">0</span>]);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                <span class="hljs-keyword">return</span> var10000.newInstance((Class[])var3[<span class="hljs-number">0</span>], (Object[])var3[<span class="hljs-number">1</span>], (Callback[])var3[<span class="hljs-number">2</span>]);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                var10000.setCallback(((Number)var3[<span class="hljs-number">0</span>]).intValue(), (Callback)var3[<span class="hljs-number">1</span>]);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>                <span class="hljs-keyword">return</span> var10000.proxyMethod(var3[<span class="hljs-number">0</span>]);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>                var10000.setCallbacks((Callback[])var3[<span class="hljs-number">0</span>]);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>                7be472d8.CGLIB$SET_STATIC_CALLBACKS((Callback[])var3[<span class="hljs-number">0</span>]);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>                7be472d8.CGLIB$SET_THREAD_CALLBACKS((Callback[])var3[<span class="hljs-number">0</span>]);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br>                <span class="hljs-keyword">return</span> var10000.getCallbacks();<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">13</span>:<br>                <span class="hljs-keyword">return</span> var10000.getCallback(((Number)var3[<span class="hljs-number">0</span>]).intValue());<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">14</span>:<br>                <span class="hljs-keyword">return</span> var10000.CGLIB$toString$<span class="hljs-number">2</span>();<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">15</span>:<br>                <span class="hljs-keyword">return</span> var10000.CGLIB$clone$<span class="hljs-number">4</span>();<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">16</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(var10000.CGLIB$hashCode$<span class="hljs-number">3</span>());<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">17</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Boolean</span>(var10000.CGLIB$equals$<span class="hljs-number">1</span>(var3[<span class="hljs-number">0</span>]));<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">18</span>:<br>                <span class="hljs-keyword">return</span> var10000.CGLIB$proxyMethod$<span class="hljs-number">0</span>(var3[<span class="hljs-number">0</span>]);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">19</span>:<br>                7be472d8.CGLIB$STATICHOOK1();<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">20</span>:<br>                <span class="hljs-keyword">return</span> 7be472d8.CGLIB$findMethodProxy((Signature)var3[<span class="hljs-number">0</span>]);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable var4) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationTargetException</span>(var4);<br>        &#125;<br><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Cannot find matching method/constructor&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">newInstance</span><span class="hljs-params">(<span class="hljs-type">int</span> var1, Object[] var2)</span> <span class="hljs-keyword">throws</span> InvocationTargetException &#123;<br>        7<span class="hljs-type">be472d8</span> <span class="hljs-variable">var10000</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> 7be472d8;<br>        7<span class="hljs-type">be472d8</span> <span class="hljs-variable">var10001</span> <span class="hljs-operator">=</span> var10000;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">var10002</span> <span class="hljs-operator">=</span> var1;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">switch</span>(var10002) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                var10001.&lt;init&gt;();<br>                <span class="hljs-keyword">return</span> var10000;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable var3) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationTargetException</span>(var3);<br>        &#125;<br><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Cannot find matching method/constructor&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMaxIndex</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">20</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="资料补充"><a href="#资料补充" class="headerlink" title="资料补充"></a>资料补充</h3><p>字节码增强：指的是Java字节码生成之后，对其进行修改，增强其功能，这种方式相当于对应用程序的二进制文件进行修改</p><p>![JVM Class装载流程](JVM Class装载流程.png)</p><p>可通过 <strong>javap -verbose</strong>查看字节码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">Classfile</span> <span class="hljs-string">/D:/project/algorithm/src/com/tlq/algorithm/tree/TreeNode.class</span><br>  <span class="hljs-string">Last</span> <span class="hljs-string">modified</span> <span class="hljs-number">2022-3</span><span class="hljs-number">-20</span><span class="hljs-string">;</span> <span class="hljs-string">size</span> <span class="hljs-number">538</span> <span class="hljs-string">bytes</span><br>  <span class="hljs-string">MD5</span> <span class="hljs-string">checksum</span> <span class="hljs-string">423c8023bfbadf0c4a1ec55fbeea2ff3</span><br>  <span class="hljs-string">Compiled</span> <span class="hljs-string">from</span> <span class="hljs-string">&quot;TreeNode.java&quot;</span><br><span class="hljs-string">public</span> <span class="hljs-string">class</span> <span class="hljs-string">com.tlq.algorithm.tree.TreeNode</span><br>  <span class="hljs-attr">minor version:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">major version:</span> <span class="hljs-number">61</span><br>  <span class="hljs-attr">flags:</span> <span class="hljs-string">ACC_PUBLIC,</span> <span class="hljs-string">ACC_SUPER</span><br><span class="hljs-attr">Constant pool:</span><br>   <span class="hljs-comment">#1 = Methodref          #2.#3          // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>   <span class="hljs-comment">#2 = Class              #4             // java/lang/Object</span><br>   <span class="hljs-comment">#3 = NameAndType        #5:#6          // &quot;&lt;init&gt;&quot;:()V</span><br>   <span class="hljs-comment">#4 = Utf8               java/lang/Object</span><br>   <span class="hljs-comment">#5 = Utf8               &lt;init&gt;</span><br>   <span class="hljs-comment">#6 = Utf8               ()V</span><br>   <span class="hljs-comment">#7 = Fieldref           #8.#9          // com/tlq/algorithm/tree/TreeNode.val:I</span><br>   <span class="hljs-comment">#8 = Class              #10            // com/tlq/algorithm/tree/TreeNode</span><br>   <span class="hljs-comment">#9 = NameAndType        #11:#12        // val:I</span><br>  <span class="hljs-comment">#10 = Utf8               com/tlq/algorithm/tree/TreeNode</span><br>  <span class="hljs-comment">#11 = Utf8               val</span><br>  <span class="hljs-comment">#12 = Utf8               I</span><br>  <span class="hljs-comment">#13 = Fieldref           #8.#14         // com/tlq/algorithm/tree/TreeNode.left:Lcom/tlq/algorithm/tree/TreeNode;</span><br>  <span class="hljs-comment">#14 = NameAndType        #15:#16        // left:Lcom/tlq/algorithm/tree/TreeNode;</span><br>  <span class="hljs-comment">#15 = Utf8               left</span><br>  <span class="hljs-comment">#16 = Utf8               Lcom/tlq/algorithm/tree/TreeNode;</span><br>  <span class="hljs-comment">#17 = Fieldref           #8.#18         // com/tlq/algorithm/tree/TreeNode.right:Lcom/tlq/algorithm/tree/TreeNode;</span><br>  <span class="hljs-comment">#18 = NameAndType        #19:#16        // right:Lcom/tlq/algorithm/tree/TreeNode;</span><br>  <span class="hljs-comment">#19 = Utf8               right</span><br>  <span class="hljs-comment">#20 = Utf8               Code</span><br>  <span class="hljs-comment">#21 = Utf8               LineNumberTable</span><br>  <span class="hljs-comment">#22 = Utf8               (I)V</span><br>  <span class="hljs-comment">#23 = Utf8               (ILcom/tlq/algorithm/tree/TreeNode;Lcom/tlq/algorithm/tree/TreeNode;)V</span><br>  <span class="hljs-comment">#24 = Utf8               SourceFile</span><br>  <span class="hljs-comment">#25 = Utf8               TreeNode.java</span><br>&#123;<br>  <span class="hljs-string">int</span> <span class="hljs-string">val;</span><br>    <span class="hljs-attr">descriptor:</span> <span class="hljs-string">I</span><br>    <span class="hljs-attr">flags:</span><br><br>  <span class="hljs-string">com.tlq.algorithm.tree.TreeNode</span> <span class="hljs-string">left;</span><br>    <span class="hljs-attr">descriptor:</span> <span class="hljs-string">Lcom/tlq/algorithm/tree/TreeNode;</span><br>    <span class="hljs-attr">flags:</span><br><br>  <span class="hljs-string">com.tlq.algorithm.tree.TreeNode</span> <span class="hljs-string">right;</span><br>    <span class="hljs-attr">descriptor:</span> <span class="hljs-string">Lcom/tlq/algorithm/tree/TreeNode;</span><br>    <span class="hljs-attr">flags:</span><br><br>  <span class="hljs-string">com.tlq.algorithm.tree.TreeNode();</span><br>    <span class="hljs-attr">descriptor:</span> <span class="hljs-string">()V</span><br>    <span class="hljs-attr">flags:</span><br>    <span class="hljs-attr">Code:</span><br>      <span class="hljs-string">stack=1</span>, <span class="hljs-string">locals=1</span>, <span class="hljs-string">args_size=1</span><br>         <span class="hljs-attr">0:</span> <span class="hljs-string">aload_0</span><br>         <span class="hljs-attr">1:</span> <span class="hljs-string">invokespecial</span> <span class="hljs-comment">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>         <span class="hljs-attr">4:</span> <span class="hljs-string">return</span><br>      <span class="hljs-attr">LineNumberTable:</span><br>        <span class="hljs-attr">line 14:</span> <span class="hljs-number">0</span><br><br>  <span class="hljs-string">com.tlq.algorithm.tree.TreeNode(int);</span><br>    <span class="hljs-attr">descriptor:</span> <span class="hljs-string">(I)V</span><br>    <span class="hljs-attr">flags:</span><br>    <span class="hljs-attr">Code:</span><br>      <span class="hljs-string">stack=2</span>, <span class="hljs-string">locals=2</span>, <span class="hljs-string">args_size=2</span><br>         <span class="hljs-attr">0:</span> <span class="hljs-string">aload_0</span><br>         <span class="hljs-attr">1:</span> <span class="hljs-string">invokespecial</span> <span class="hljs-comment">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>         <span class="hljs-attr">4:</span> <span class="hljs-string">aload_0</span><br>         <span class="hljs-attr">5:</span> <span class="hljs-string">iload_1</span><br>         <span class="hljs-attr">6:</span> <span class="hljs-string">putfield</span>      <span class="hljs-comment">#7                  // Field val:I</span><br>         <span class="hljs-attr">9:</span> <span class="hljs-string">return</span><br>      <span class="hljs-attr">LineNumberTable:</span><br>        <span class="hljs-attr">line 16:</span> <span class="hljs-number">0</span><br>        <span class="hljs-attr">line 17:</span> <span class="hljs-number">4</span><br>        <span class="hljs-attr">line 18:</span> <span class="hljs-number">9</span><br><br>  <span class="hljs-string">com.tlq.algorithm.tree.TreeNode(int</span>, <span class="hljs-string">com.tlq.algorithm.tree.TreeNode</span>, <span class="hljs-string">com.tlq.algorithm.tree.TreeNode);</span><br>    <span class="hljs-attr">descriptor:</span> <span class="hljs-string">(ILcom/tlq/algorithm/tree/TreeNode;Lcom/tlq/algorithm/tree/TreeNode;)V</span><br>    <span class="hljs-attr">flags:</span><br>    <span class="hljs-attr">Code:</span><br>      <span class="hljs-string">stack=2</span>, <span class="hljs-string">locals=4</span>, <span class="hljs-string">args_size=4</span><br>         <span class="hljs-attr">0:</span> <span class="hljs-string">aload_0</span><br>         <span class="hljs-attr">1:</span> <span class="hljs-string">invokespecial</span> <span class="hljs-comment">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>         <span class="hljs-attr">4:</span> <span class="hljs-string">aload_0</span><br>         <span class="hljs-attr">5:</span> <span class="hljs-string">iload_1</span><br>         <span class="hljs-attr">6:</span> <span class="hljs-string">putfield</span>      <span class="hljs-comment">#7                  // Field val:I</span><br>         <span class="hljs-attr">9:</span> <span class="hljs-string">aload_0</span><br>        <span class="hljs-attr">10:</span> <span class="hljs-string">aload_2</span><br>        <span class="hljs-attr">11:</span> <span class="hljs-string">putfield</span>      <span class="hljs-comment">#13                 // Field left:Lcom/tlq/algorithm/tree/TreeNode;</span><br>        <span class="hljs-attr">14:</span> <span class="hljs-string">aload_0</span><br>        <span class="hljs-attr">15:</span> <span class="hljs-string">aload_3</span><br>        <span class="hljs-attr">16:</span> <span class="hljs-string">putfield</span>      <span class="hljs-comment">#17                 // Field right:Lcom/tlq/algorithm/tree/TreeNode;</span><br>        <span class="hljs-attr">19:</span> <span class="hljs-string">return</span><br>      <span class="hljs-attr">LineNumberTable:</span><br>        <span class="hljs-attr">line 20:</span> <span class="hljs-number">0</span><br>        <span class="hljs-attr">line 21:</span> <span class="hljs-number">4</span><br>        <span class="hljs-attr">line 22:</span> <span class="hljs-number">9</span><br>        <span class="hljs-attr">line 23:</span> <span class="hljs-number">14</span><br>        <span class="hljs-attr">line 24:</span> <span class="hljs-number">19</span><br>&#125;<br><span class="hljs-attr">SourceFile:</span> <span class="hljs-string">&quot;TreeNode.java&quot;</span><br></code></pre></td></tr></table></figure><p>上述的class文件主要包含如下三大块信息：</p><ul><li>Code区：编写代码编译后的JVM指令集，字节码增强的主要操作区域</li><li>LineNumberTable：行号表，是行号对Code区指令集的关联，知道哪一行需执行哪些指令</li><li>LocalVeriableTable：本地变量表，就是局部变量的定义，实际存储结构也是和类的字段表是类似的</li></ul><p>使用字节码增强的技术有如下：</p><ul><li><p>ASM字节码增强类库</p><p>ASM是一个轻量级的Java字节码操作框架，在虚拟机指令层进行字节码操作，在加载和操作类文件时不需要将整个类读取到内存，就可以以流式的方式来处理字节码文件</p><p>优点：</p><p>由于使用流式的加载和处理机制，因此消耗的内存较小，并且是几个字节码增强工具中速度最快的一种增强技术</p><p>缺点：</p><p>编程难度较大，需熟悉JVM各种指令集（为降低难度，ASM提供了工具已查看常规代码的ASM编码 - ASM ByteCode OutLine（idea plugin））</p><p>ASM字节码增强类库的工作流程</p><p><img src="/2022/11/27/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/ASM%E5%AD%97%E8%8A%82%E7%A0%81%E5%A2%9E%E5%BC%BA%E5%8E%9F%E7%90%86.png" alt="ASM字节码增强原理"></p><p>ASM Core API主要包括的工具类：</p><ul><li>ClassReader: 用于读取已经编译好的 <strong>.class文件</strong></li><li>ClassWriter：用于重新构造编译后的类，如修改类型、属性以及方法，也可以生成新类的字节码文件</li><li>各种Visitor类：如FieldVisitor、MethodVisitor、AnnotationVisitor分别对字节码中的属性、方法、注解进行处理</li></ul><p>另外还有一个TreeApi，以DOM的方式进行解析和操作</p></li><li><p>CGLib动态代理</p><p>GCLib动态大力基于ASM实现，同理Spring也一样</p><p>优点：</p><p>将ASM复杂的技术进行了包装，开放简单易用的工具类。使用简单的同时，整体速度也不差</p><p>缺点：</p><p>对ASM进行二次封装，字节码增强的灵活性有所下降</p><p>也因为封装，对于字节码增强灵活性减弱，还需要配合Java反射进行实现字节码增强</p><p>CGLib核心类：</p><p>Enhancer：用于创建代理类的工具类，可以设置目标类以及代理回调对象</p><p>MethodInterceptor：主要是实现代理回调的方法，用于拦截实现自己的业务功能</p></li><li><p>Javassis字节码增强类库</p><p>Javasist是一个开源分析、编辑和创建的Java字节码类库</p><p>基于源代码层面的字节码工具类，性能比ASM稍差</p><p>其主要核心工具类：</p><ul><li>ClassPool</li><li>CtClass</li><li>CtMethod</li><li>CtField</li></ul><p>优点：</p><p>简单、上手快（直接只用Java编码形式，且与Java反射的API颇为相似，不需要了解虚拟机指令，即可动态改变类的结构、动态生成类）</p><p>缺点：</p><ul><li>性能较差（操作字节码时性能较差，而不是执行字节码慢（不需频繁操作字节码时推荐使用））</li><li>不支持少量代码的书写<ul><li>不支持数组的初始化，如String[]{“1”,”2”}</li><li>不支持内部类和匿名类</li></ul></li></ul></li></ul><h3 id="资料引用"><a href="#资料引用" class="headerlink" title="资料引用"></a>资料引用</h3><ul><li><a href="https://juejin.cn/post/6844904098580398088">Java及动态代理详解</a></li><li><a href="https://mp.weixin.qq.com/s/QtsNf_nFElHWT11jl525Ug">Java字节码增强</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java 代理</tag>
      
      <tag>动态</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Aop 与 Aspectj的关系</title>
    <link href="/2022/11/27/Spring-Aop-%E4%B8%8E-Aspect%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <url>/2022/11/27/Spring-Aop-%E4%B8%8E-Aspect%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<h3 id="Spring-Aop"><a href="#Spring-Aop" class="headerlink" title="Spring Aop"></a>Spring Aop</h3><p>Spring AOP 是用纯 Java 实现的（<strong>不提供最完整的 AOP 实现，目的是提供 AOP 实现和 Spring IoC 之间的紧密集成，以解决应用程序中的常见问题</strong>），<strong>且通过运行时进行织入</strong>。不需要特殊的编译过程。Spring AOP 不需要控制类加载器层次结构，因此适合在 servlet 容器或应用服务器中使用。</p><blockquote><p><strong>简单描述</strong>：Spring AOP 旨在提供一个跨 Spring IoC 的简单 AOP 实现，以解决程序员面临的最常见问题。<strong>它并不是一个完整的 AOP 解决方案</strong>——它只能应用于由 Spring 容器管理的 beans。</p></blockquote><p>Spring AOP 是<strong>一个基于代理模式的 AOP 框架</strong>。这意味着要实现目标对象的方面，它将创建该对象的代理。这是通过以下两种方式之一实现的：</p><ol><li>JDK动态代理——Spring AOP的首选方式。只要目标对象实现了一个接口，就会使用 JDK 动态代理</li><li>CGLIB 代理——如果目标对象没有实现接口，那么可以使用 CGLIB 代理</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li><p>Spring AOP 目前只支持方法执行连接点（建议在 Spring beans 上执行方法）。字段拦截未实现，尽管可以在不破坏核心 Spring AOP API 的情况下添加对字段拦截的支持。如果您需要建议字段访问和更新连接点，请考虑使用 AspectJ 等语言。</p></li><li><p>Spring AOP基于代理模式。因此，它需要目标类的子类，并相应的应用横切关注点。但是也伴随着局限性，我们不能跨越“final”的类来应用横切关注点（或切面），因为它们不能被覆盖，从而导致运行时异常</p></li><li><p>不能应用于静态和final的方法。由于不能覆写，Spring的切面不能应用于他们。因此，Spring AOP由于这些限制，只支持执行方法的连接点。</p></li><li><p>Spring AOP 中，方面不会应用于在同一类中调用的方法。</p><blockquote><p>在同一个类中调用方法时，我们并没有调用 Spring AOP 提供的代理方法。如果我们需要这个功能，那么我们必须在不同的 bean 中定义一个单独的方法，或者使用 AspectJ。</p></blockquote></li></ul><h3 id="AspectJ"><a href="#AspectJ" class="headerlink" title="AspectJ"></a>AspectJ</h3><p><strong>AspectJ是原始的AOP技术，旨在提供完整的AOP解决方案。AspectJ使用的是编译时和类加载时织入</strong></p><p><strong>AspectJ 在运行时不做任何事情，因为类是直接用方面编译的</strong></p><p>AspectJ可使用如下三种不同类型的编织（<strong>即对对象进行增强</strong>）</p><ol><li><strong>编译时编织</strong>：AspectJ 编译器将我们方面的源代码和我们的应用程序作为输入，并生成编织类文件作为输出</li><li><strong>编译后编织</strong>：这也称为二进制编织。它用于将现有的类文件和 JAR 文件与我们的切面编织在一起</li><li><strong>加载时编织</strong>：这与之前的二进制编织完全一样，不同之处在于编织被推迟到类加载器将类文件加载到 JVM 时</li></ol><h3 id="两者对比"><a href="#两者对比" class="headerlink" title="两者对比"></a>两者对比</h3><p><img src="/2022/11/27/Spring-Aop-%E4%B8%8E-Aspect%E7%9A%84%E5%85%B3%E7%B3%BB/springaop-process.png" alt="springaop-process"></p><p><strong>两者 Joinpoint 支持对比</strong></p><table><thead><tr><th>Joinpoint</th><th>Spring AOP Supported</th><th>AspectJ Supported</th></tr></thead><tbody><tr><td>Method Call</td><td>No</td><td>Yes</td></tr><tr><td>Method Execution</td><td>Yes</td><td>Yes</td></tr><tr><td>Constructor Call</td><td>No</td><td>Yes</td></tr><tr><td>Constructor Execution</td><td>No</td><td>Yes</td></tr><tr><td>Static initializer execution</td><td>No</td><td>Yes</td></tr><tr><td>Object initialization</td><td>No</td><td>Yes</td></tr><tr><td>Field reference</td><td>No</td><td>Yes</td></tr><tr><td>Field assignment</td><td>No</td><td>Yes</td></tr><tr><td>Handler execution</td><td>No</td><td>Yes</td></tr><tr><td>Advice execution</td><td>No</td><td>Yes</td></tr></tbody></table><p><strong>两者整体对比</strong></p><table><thead><tr><th>Spring AOP</th><th>AspectJ</th></tr></thead><tbody><tr><td>纯Java实现</td><td>使用 Java 编程语言的扩展实现</td></tr><tr><td>无需单独的编译过程</td><td>除非设置了 LTW，否则需要 AspectJ 编译器 (ajc)</td></tr><tr><td>仅运行时编织可用</td><td>运行时编织不可用。支持编译时、编译后和加载时编织</td></tr><tr><td>不太强大——只支持方法级编织</td><td>更强大——可以编织字段、方法、构造函数、静态初始化器、最终类&#x2F;方法等……</td></tr><tr><td>只能在Spring容器管理的bean上实现</td><td>可以在所有领域对象上实现</td></tr><tr><td>仅支持方法执行切入点</td><td>支持所有切入点</td></tr><tr><td>代理由目标对象创建，并且方面应用于这些代理</td><td>在应用程序执行之前（在运行时之前），方面被直接编织到代码中</td></tr><tr><td>比 AspectJ 慢得多</td><td>更好的性能</td></tr><tr><td>易于学习和应用</td><td>相对于 Spring AOP 更复杂</td></tr></tbody></table><ul><li><p>与 Spring AOP 不同，AspectJ不需要任何设计模式。为了将方面编织到代码中，它引入了称为 AspectJ 编译器 (ajc) 的编译器，通过它我们可以编译我们的程序，然后通过提供一个小型（&lt; 100K）运行时库来运行它</p></li><li><p>对于性能层面，AspectJ（编译时织入）比 Spring Aop (运行时织入) <strong>跨得多</strong></p><blockquote><p><a href="https://web.archive.org/web/20150520175004/https://docs.codehaus.org/display/AW/AOP+Benchmark">基准测试</a>表明 AspectJ 几乎比 Spring AOP 快 8 到 35 倍</p></blockquote></li></ul><h3 id="思考点"><a href="#思考点" class="headerlink" title="思考点"></a>思考点</h3><p>框架与框架间没有好坏，<strong>而是应该基于更为适用于当前业务及架构层次去思考</strong></p><ul><li>框架：如果应用程序没有使用 Spring 框架，那么我们别无选择，只能放弃使用 Spring AOP 的想法，因为它无法管理任何超出 Spring 容器范围的东西。但是，如果我们的应用程序完全使用 Spring 框架创建，那么我们可以使用 Spring AOP，因为它易于学习和应用</li><li>灵活性：鉴于有限的连接点支持，Spring AOP 不是一个完整的 AOP 解决方案，但它解决了程序员面临的最常见问题。尽管如果我们想更深入地挖掘并最大限度地利用 AOP 并希望获得广泛可用连接点的支持，那么 AspectJ 是不二之选</li><li>性能：如果我们使用有限的方面，那么就会有微不足道的性能差异。但有时应用程序的方面会超过数万个。我们不想在这种情况下使用运行时织入，因此最好选择 AspectJ。AspectJ 比 Spring AOP 快 8 到 35 倍</li><li>两全其美：这两个框架彼此完全兼容。我们总是可以尽可能地利用 Spring AOP，并且仍然使用 AspectJ 来获得前者不支持的连接点的支持</li></ul><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ul><li><p>在Spring Aop 中 为什么强依赖 AspectJ </p><blockquote><p><strong>个人看法：</strong></p><p>在网上，大部分都是觉得的Spring只AspectJ的注解，<strong>但应该这样考虑，Apspect因为只支持（编译时、类加载时织入），没发做到运行时织入，那Spring 为了更为全面的功能，所以自己实现了运行时织入</strong></p></blockquote></li></ul><h3 id="资料"><a href="#资料" class="headerlink" title="资料:"></a>资料:</h3><ul><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#aop-introduction-spring-defn">Spring Aop官方文档</a></li><li><a href="https://www.baeldung.com/spring-aop-vs-aspectj">Spring Aop 与 AspectJ Blog</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Spring Aop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Aop</tag>
      
      <tag>Java 代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>代理模式</title>
    <link href="/2022/11/27/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/11/27/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在日常工作中，蛮常见的一种设计模式。<strong>例如：Nginx、Spring 事务、Mybatis中的statement等等的一些调用，都使用了进行设计</strong></p><p>代理就是让<code>proxy</code>对象去对<code>target</code>对象做相关调用代理，继而可以在相关<code>proxyMethod</code>方法中做一些自定义的操作同时，也能屏蔽<code>client</code>对<code>target</code>的实现细节的了解（<strong>个人看法</strong>）</p><blockquote><p><strong>网上观念</strong></p><p><strong>的主要作用是扩展目标对象的功能，比如说在目标对象的某个方法执行前后你可以增加一些自定义的操作。</strong></p><p><strong>百度百科</strong></p><p>的定义：为其他对象提供一种代理以控制对这个对象的访问。在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用</p></blockquote><p><img src="/.png"></p><p>在实际上，有如下几种代理方式（主要以Java作为讨论）</p><ul><li>静态代理（基于设计模式的实现）</li><li>动态代理（基于运行时进行处理，会生成含有<code>$*.class</code>的代理对象）</li></ul><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>静态代理是基于代码层面，使用设计模式去进行实现的</p><p><strong>实现原理</strong></p><p>通过使用<code>Proxy</code>对象去屏蔽相关<code>Target</code>对象调用</p><p><strong>举个栗子</strong>（后续的也基于这个栗子来举吧）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> proxy.service.impl;<br><br><span class="hljs-keyword">import</span> proxy.service.ProxyService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> TanLinRu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021.10.14</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ProxyService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">proxyMethod</span><span class="hljs-params">(Object object)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;the method has proxied&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> proxy.service.impl;<br><br><span class="hljs-keyword">import</span> proxy.service.ProxyService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> TanLinRu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021.10.14</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ProxyService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">proxyMethod</span><span class="hljs-params">(Object object)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;the method has proxied&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>静态代理实现简单且不侵入原代码，<strong>但当场景复杂时，静态代理会有以下缺点</strong></p><p><strong>缺点：</strong></p><ol><li>当需要代理多个类时，代理对象要实现与目标对象一致的接口。要么，只维护一个代理类来实现多个接口，但这样会导致代理类过于庞大。要么，新建多个代理类，但这样会产生过多的代理类。</li><li>当接口需要增加、删除、修改方法时，目标对象与代理类都要同时修改，不易维护。</li></ol><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>在对于上述<code>静态代理</code>中所存在的问题，动态代理便因此而生</p><p><strong>动态代理是指代理类在程序运行时进行创建的代理方式。这种情况下，代理类并不是在Java代码中定义的，而是在运行时根据Java代码中的“指令”动态生成的。</strong></p><p><strong>相比于静态代理，动态代理的优势在于可以很方便的对代理类的函数进行统一的处理，而不用修改每个代理类的函数。</strong></p><p>动态代理实现的方式比较多</p><ul><li><p>JDK</p><p>JAVA Proxy 基于接口进行动态代理</p></li><li><p>Cglib</p><p>Cglib是通过继承的方式进行代理，被代理对象不需要实现接口，<strong>但无法处理final的情况</strong></p></li></ul><p>在实际上，动态代理实现方式比较多，本文以<code>JDK</code>和<code>Cglib</code>来进行实现</p><p><strong>JDK动态</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> proxy.test;<br><br><span class="hljs-keyword">import</span> com.sun.xml.internal.messaging.saaj.util.ByteOutputStream;<br><span class="hljs-keyword">import</span> proxy.service.ProxyService;<br><span class="hljs-keyword">import</span> proxy.service.impl.ProxyServiceImpl;<br><span class="hljs-keyword">import</span> domain.User;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JDK proxy</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> TanLinRu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021.10.14</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DebugProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Object object;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成代理实例</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> object</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">newInstance</span><span class="hljs-params">(Object object)</span> &#123;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(object.getClass().getClassLoader(),<br>                                      object.getClass().getInterfaces(),<br>                                      <span class="hljs-keyword">new</span> <span class="hljs-title class_">DebugProxy</span>(object));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DebugProxy</span><span class="hljs-params">(Object object)</span> &#123;<br>        <span class="hljs-built_in">this</span>.object = object;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        Object result;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;before method &quot;</span> + method.getName());<br>            result = method.invoke(object, args);<br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>            <span class="hljs-keyword">throw</span> e.getTargetException();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;unexpected invocation exception: &quot;</span> +<br>                                       e.getMessage());<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;after method &quot;</span> + method.getName());<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ProxyService</span> <span class="hljs-variable">proxyService</span> <span class="hljs-operator">=</span> (ProxyService) DebugProxy.newInstance(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyServiceImpl</span>());<br>        System.out.println(proxyService.getClass());<br>        proxyService.proxyMethod(<span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">traverse</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (value == <span class="hljs-number">2000</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        traverse(value+<span class="hljs-number">1</span>);<br>        System.out.println(value);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>Cglib动态</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> proxy.test;<br><br><span class="hljs-keyword">import</span> net.sf.cglib.proxy.Enhancer;<br><span class="hljs-keyword">import</span> proxy.cglib.CglibInterceptor;<br><span class="hljs-keyword">import</span> proxy.service.ProxyService;<br><span class="hljs-keyword">import</span> proxy.service.impl.ProxyServiceImpl;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * cglib反射测试</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> TanLinRu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022-03-27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CglibProxy</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//创建大力对象增强器，可以对目标进行扩展</span><br>        <span class="hljs-type">Enhancer</span> <span class="hljs-variable">enhancer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Enhancer</span>();<br>        <span class="hljs-comment">//将目标对象设置为父类</span><br>        enhancer.setSuperclass(ProxyServiceImpl.class);<br>        <span class="hljs-comment">//设置目标拦截器</span><br>        enhancer.setCallback(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CglibInterceptor</span>());<br>        <span class="hljs-comment">//创建代理对象</span><br>        <span class="hljs-type">ProxyServiceImpl</span> <span class="hljs-variable">proxyService</span> <span class="hljs-operator">=</span> (ProxyServiceImpl) enhancer.create();<br>        <span class="hljs-comment">//通过代理对象调用目标方法</span><br>        proxyService.proxyMethod(<span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ul><li><p>动态代理实现了，但IDEA中没看到相关$proxy对象的生成</p><p>可通过环境变量来进行处理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># java动态代理持久化为.class文件配置方式</span></span><br>-Dsun.misc.ProxyGenerator.saveGeneratedFiles=true<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># cglib动态代理持久化为.class文件配置方式</span></span><br>-Dcglib.debugLocation=/Users/xxx<br></code></pre></td></tr></table></figure><p><img src="/%E7%94%9F%E6%88%90%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1.png" alt="生成代理对象"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Source code recreated from a .class file by IntelliJ IDEA</span><br><span class="hljs-comment">// (powered by FernFlower decompiler)</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-keyword">package</span> proxy.service.impl;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> net.sf.cglib.core.Signature;<br><span class="hljs-keyword">import</span> net.sf.cglib.proxy.Callback;<br><span class="hljs-keyword">import</span> net.sf.cglib.reflect.FastClass;<br><span class="hljs-keyword">import</span> proxy.service.impl.ProxyServiceImpl..EnhancerByCGLIB..7be472d8;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyServiceImpl$$EnhancerByCGLIB$$7be472d8$$FastClassByCGLIB$$9f316d13</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FastClass</span> &#123;<br>    <span class="hljs-keyword">public</span> ProxyServiceImpl$$EnhancerByCGLIB$$7be472d8$$FastClassByCGLIB$$9f316d13(Class var1) &#123;<br>        <span class="hljs-built_in">super</span>(var1);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getIndex</span><span class="hljs-params">(Signature var1)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">var10000</span> <span class="hljs-operator">=</span> var1.toString();<br>        <span class="hljs-keyword">switch</span>(var10000.hashCode()) &#123;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">2055565910</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;CGLIB$SET_THREAD_CALLBACKS([Lnet/sf/cglib/proxy/Callback;)V&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">11</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">1882565338</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;CGLIB$equals$1(Ljava/lang/Object;)Z&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">17</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">1457535688</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;CGLIB$STATICHOOK1()V&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">19</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">1411842725</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;CGLIB$hashCode$3()I&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">16</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">894172689</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;newInstance(Lnet/sf/cglib/proxy/Callback;)Ljava/lang/Object;&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">826936080</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;proxyMethod(Ljava/lang/Object;)Ljava/lang/Object;&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">8</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">623122092</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;CGLIB$findMethodProxy(Lnet/sf/cglib/core/Signature;)Lnet/sf/cglib/proxy/MethodProxy;&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">20</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">508378822</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;clone()Ljava/lang/Object;&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">419626537</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;setCallbacks([Lnet/sf/cglib/proxy/Callback;)V&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">9</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">504609561</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;CGLIB$proxyMethod$0(Ljava/lang/Object;)Ljava/lang/Object;&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">18</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">560567118</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;setCallback(ILnet/sf/cglib/proxy/Callback;)V&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">7</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">811063227</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;newInstance([Ljava/lang/Class;[Ljava/lang/Object;[Lnet/sf/cglib/proxy/Callback;)Ljava/lang/Object;&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">6</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">973717575</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;getCallbacks()[Lnet/sf/cglib/proxy/Callback;&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">12</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1221173700</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;newInstance([Lnet/sf/cglib/proxy/Callback;)Ljava/lang/Object;&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1230699260</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;getCallback(I)Lnet/sf/cglib/proxy/Callback;&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">13</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1306468936</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;CGLIB$toString$2()Ljava/lang/String;&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">14</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1584330438</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;CGLIB$SET_STATIC_CALLBACKS([Lnet/sf/cglib/proxy/Callback;)V&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1800494055</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;CGLIB$clone$4()Ljava/lang/Object;&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">15</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1826985398</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;equals(Ljava/lang/Object;)Z&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1913648695</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;toString()Ljava/lang/String;&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1984935277</span>:<br>            <span class="hljs-keyword">if</span> (var10000.equals(<span class="hljs-string">&quot;hashCode()I&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getIndex</span><span class="hljs-params">(String var1, Class[] var2)</span> &#123;<br>        <span class="hljs-keyword">switch</span>(var1.hashCode()) &#123;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">1776922004</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;toString&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">1295482945</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;equals&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">if</span> (var2[<span class="hljs-number">0</span>].getName().equals(<span class="hljs-string">&quot;java.lang.Object&quot;</span>)) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">1053468136</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;getCallbacks&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">12</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">124978609</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;CGLIB$equals$1&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">if</span> (var2[<span class="hljs-number">0</span>].getName().equals(<span class="hljs-string">&quot;java.lang.Object&quot;</span>)) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">17</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">60403779</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;CGLIB$SET_STATIC_CALLBACKS&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">if</span> (var2[<span class="hljs-number">0</span>].getName().equals(<span class="hljs-string">&quot;[Lnet.sf.cglib.proxy.Callback;&quot;</span>)) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">29025555</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;CGLIB$hashCode$3&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">16</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">85179481</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;CGLIB$SET_THREAD_CALLBACKS&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">if</span> (var2[<span class="hljs-number">0</span>].getName().equals(<span class="hljs-string">&quot;[Lnet.sf.cglib.proxy.Callback;&quot;</span>)) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">11</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">94756189</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;clone&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">147696667</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;hashCode&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">161998109</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;CGLIB$STATICHOOK1&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">19</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">495524492</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;setCallbacks&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">if</span> (var2[<span class="hljs-number">0</span>].getName().equals(<span class="hljs-string">&quot;[Lnet.sf.cglib.proxy.Callback;&quot;</span>)) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">9</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1154623345</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;CGLIB$findMethodProxy&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">if</span> (var2[<span class="hljs-number">0</span>].getName().equals(<span class="hljs-string">&quot;net.sf.cglib.core.Signature&quot;</span>)) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">20</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1543336189</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;CGLIB$toString$2&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">14</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1621244376</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;CGLIB$proxyMethod$0&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">if</span> (var2[<span class="hljs-number">0</span>].getName().equals(<span class="hljs-string">&quot;java.lang.Object&quot;</span>)) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">18</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1811874389</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;newInstance&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">var10001</span> <span class="hljs-operator">=</span> var2[<span class="hljs-number">0</span>].getName();<br>                    <span class="hljs-keyword">switch</span>(var10001.hashCode()) &#123;<br>                    <span class="hljs-keyword">case</span> -<span class="hljs-number">845341380</span>:<br>                        <span class="hljs-keyword">if</span> (var10001.equals(<span class="hljs-string">&quot;net.sf.cglib.proxy.Callback&quot;</span>)) &#123;<br>                            <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>                        &#125;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">1730110032</span>:<br>                        <span class="hljs-keyword">if</span> (var10001.equals(<span class="hljs-string">&quot;[Lnet.sf.cglib.proxy.Callback;&quot;</span>)) &#123;<br>                            <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>;<br>                        &#125;<br>                    &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    <span class="hljs-keyword">if</span> (var2[<span class="hljs-number">0</span>].getName().equals(<span class="hljs-string">&quot;[Ljava.lang.Class;&quot;</span>) &amp;&amp; var2[<span class="hljs-number">1</span>].getName().equals(<span class="hljs-string">&quot;[Ljava.lang.Object;&quot;</span>) &amp;&amp; var2[<span class="hljs-number">2</span>].getName().equals(<span class="hljs-string">&quot;[Lnet.sf.cglib.proxy.Callback;&quot;</span>)) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">6</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1817099975</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;setCallback&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    <span class="hljs-keyword">if</span> (var2[<span class="hljs-number">0</span>].getName().equals(<span class="hljs-string">&quot;int&quot;</span>) &amp;&amp; var2[<span class="hljs-number">1</span>].getName().equals(<span class="hljs-string">&quot;net.sf.cglib.proxy.Callback&quot;</span>)) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">7</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1905679803</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;getCallback&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">if</span> (var2[<span class="hljs-number">0</span>].getName().equals(<span class="hljs-string">&quot;int&quot;</span>)) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">13</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1912110319</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;proxyMethod&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">if</span> (var2[<span class="hljs-number">0</span>].getName().equals(<span class="hljs-string">&quot;java.lang.Object&quot;</span>)) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">8</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1951977610</span>:<br>            <span class="hljs-keyword">if</span> (var1.equals(<span class="hljs-string">&quot;CGLIB$clone$4&quot;</span>)) &#123;<br>                <span class="hljs-keyword">switch</span>(var2.length) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">15</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getIndex</span><span class="hljs-params">(Class[] var1)</span> &#123;<br>        <span class="hljs-keyword">switch</span>(var1.length) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(<span class="hljs-type">int</span> var1, Object var2, Object[] var3)</span> <span class="hljs-keyword">throws</span> InvocationTargetException &#123;<br>        7<span class="hljs-type">be472d8</span> <span class="hljs-variable">var10000</span> <span class="hljs-operator">=</span> (7be472d8)var2;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">var10001</span> <span class="hljs-operator">=</span> var1;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">switch</span>(var10001) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Boolean</span>(var10000.equals(var3[<span class="hljs-number">0</span>]));<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> var10000.toString();<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(var10000.hashCode());<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                <span class="hljs-keyword">return</span> var10000.clone();<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                <span class="hljs-keyword">return</span> var10000.newInstance((Callback)var3[<span class="hljs-number">0</span>]);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                <span class="hljs-keyword">return</span> var10000.newInstance((Callback[])var3[<span class="hljs-number">0</span>]);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                <span class="hljs-keyword">return</span> var10000.newInstance((Class[])var3[<span class="hljs-number">0</span>], (Object[])var3[<span class="hljs-number">1</span>], (Callback[])var3[<span class="hljs-number">2</span>]);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                var10000.setCallback(((Number)var3[<span class="hljs-number">0</span>]).intValue(), (Callback)var3[<span class="hljs-number">1</span>]);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>                <span class="hljs-keyword">return</span> var10000.proxyMethod(var3[<span class="hljs-number">0</span>]);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>                var10000.setCallbacks((Callback[])var3[<span class="hljs-number">0</span>]);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>                7be472d8.CGLIB$SET_STATIC_CALLBACKS((Callback[])var3[<span class="hljs-number">0</span>]);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>                7be472d8.CGLIB$SET_THREAD_CALLBACKS((Callback[])var3[<span class="hljs-number">0</span>]);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br>                <span class="hljs-keyword">return</span> var10000.getCallbacks();<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">13</span>:<br>                <span class="hljs-keyword">return</span> var10000.getCallback(((Number)var3[<span class="hljs-number">0</span>]).intValue());<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">14</span>:<br>                <span class="hljs-keyword">return</span> var10000.CGLIB$toString$<span class="hljs-number">2</span>();<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">15</span>:<br>                <span class="hljs-keyword">return</span> var10000.CGLIB$clone$<span class="hljs-number">4</span>();<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">16</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(var10000.CGLIB$hashCode$<span class="hljs-number">3</span>());<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">17</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Boolean</span>(var10000.CGLIB$equals$<span class="hljs-number">1</span>(var3[<span class="hljs-number">0</span>]));<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">18</span>:<br>                <span class="hljs-keyword">return</span> var10000.CGLIB$proxyMethod$<span class="hljs-number">0</span>(var3[<span class="hljs-number">0</span>]);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">19</span>:<br>                7be472d8.CGLIB$STATICHOOK1();<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">20</span>:<br>                <span class="hljs-keyword">return</span> 7be472d8.CGLIB$findMethodProxy((Signature)var3[<span class="hljs-number">0</span>]);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable var4) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationTargetException</span>(var4);<br>        &#125;<br><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Cannot find matching method/constructor&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">newInstance</span><span class="hljs-params">(<span class="hljs-type">int</span> var1, Object[] var2)</span> <span class="hljs-keyword">throws</span> InvocationTargetException &#123;<br>        7<span class="hljs-type">be472d8</span> <span class="hljs-variable">var10000</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> 7be472d8;<br>        7<span class="hljs-type">be472d8</span> <span class="hljs-variable">var10001</span> <span class="hljs-operator">=</span> var10000;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">var10002</span> <span class="hljs-operator">=</span> var1;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">switch</span>(var10002) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                var10001.&lt;init&gt;();<br>                <span class="hljs-keyword">return</span> var10000;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable var3) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationTargetException</span>(var3);<br>        &#125;<br><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Cannot find matching method/constructor&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMaxIndex</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">20</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="资料补充"><a href="#资料补充" class="headerlink" title="资料补充"></a>资料补充</h3><p>字节码增强：指的是Java字节码生成之后，对其进行修改，增强其功能，这种方式相当于对应用程序的二进制文件进行修改</p><p>![JVM Class装载流程](&#x2F;JVM Class装载流程.png)</p><p>可通过 <strong>javap -verbose</strong>查看字节码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">Classfile</span> <span class="hljs-string">/D:/project/algorithm/src/com/tlq/algorithm/tree/TreeNode.class</span><br>  <span class="hljs-string">Last</span> <span class="hljs-string">modified</span> <span class="hljs-number">2022-3</span><span class="hljs-number">-20</span><span class="hljs-string">;</span> <span class="hljs-string">size</span> <span class="hljs-number">538</span> <span class="hljs-string">bytes</span><br>  <span class="hljs-string">MD5</span> <span class="hljs-string">checksum</span> <span class="hljs-string">423c8023bfbadf0c4a1ec55fbeea2ff3</span><br>  <span class="hljs-string">Compiled</span> <span class="hljs-string">from</span> <span class="hljs-string">&quot;TreeNode.java&quot;</span><br><span class="hljs-string">public</span> <span class="hljs-string">class</span> <span class="hljs-string">com.tlq.algorithm.tree.TreeNode</span><br>  <span class="hljs-attr">minor version:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">major version:</span> <span class="hljs-number">61</span><br>  <span class="hljs-attr">flags:</span> <span class="hljs-string">ACC_PUBLIC,</span> <span class="hljs-string">ACC_SUPER</span><br><span class="hljs-attr">Constant pool:</span><br>   <span class="hljs-comment">#1 = Methodref          #2.#3          // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>   <span class="hljs-comment">#2 = Class              #4             // java/lang/Object</span><br>   <span class="hljs-comment">#3 = NameAndType        #5:#6          // &quot;&lt;init&gt;&quot;:()V</span><br>   <span class="hljs-comment">#4 = Utf8               java/lang/Object</span><br>   <span class="hljs-comment">#5 = Utf8               &lt;init&gt;</span><br>   <span class="hljs-comment">#6 = Utf8               ()V</span><br>   <span class="hljs-comment">#7 = Fieldref           #8.#9          // com/tlq/algorithm/tree/TreeNode.val:I</span><br>   <span class="hljs-comment">#8 = Class              #10            // com/tlq/algorithm/tree/TreeNode</span><br>   <span class="hljs-comment">#9 = NameAndType        #11:#12        // val:I</span><br>  <span class="hljs-comment">#10 = Utf8               com/tlq/algorithm/tree/TreeNode</span><br>  <span class="hljs-comment">#11 = Utf8               val</span><br>  <span class="hljs-comment">#12 = Utf8               I</span><br>  <span class="hljs-comment">#13 = Fieldref           #8.#14         // com/tlq/algorithm/tree/TreeNode.left:Lcom/tlq/algorithm/tree/TreeNode;</span><br>  <span class="hljs-comment">#14 = NameAndType        #15:#16        // left:Lcom/tlq/algorithm/tree/TreeNode;</span><br>  <span class="hljs-comment">#15 = Utf8               left</span><br>  <span class="hljs-comment">#16 = Utf8               Lcom/tlq/algorithm/tree/TreeNode;</span><br>  <span class="hljs-comment">#17 = Fieldref           #8.#18         // com/tlq/algorithm/tree/TreeNode.right:Lcom/tlq/algorithm/tree/TreeNode;</span><br>  <span class="hljs-comment">#18 = NameAndType        #19:#16        // right:Lcom/tlq/algorithm/tree/TreeNode;</span><br>  <span class="hljs-comment">#19 = Utf8               right</span><br>  <span class="hljs-comment">#20 = Utf8               Code</span><br>  <span class="hljs-comment">#21 = Utf8               LineNumberTable</span><br>  <span class="hljs-comment">#22 = Utf8               (I)V</span><br>  <span class="hljs-comment">#23 = Utf8               (ILcom/tlq/algorithm/tree/TreeNode;Lcom/tlq/algorithm/tree/TreeNode;)V</span><br>  <span class="hljs-comment">#24 = Utf8               SourceFile</span><br>  <span class="hljs-comment">#25 = Utf8               TreeNode.java</span><br>&#123;<br>  <span class="hljs-string">int</span> <span class="hljs-string">val;</span><br>    <span class="hljs-attr">descriptor:</span> <span class="hljs-string">I</span><br>    <span class="hljs-attr">flags:</span><br><br>  <span class="hljs-string">com.tlq.algorithm.tree.TreeNode</span> <span class="hljs-string">left;</span><br>    <span class="hljs-attr">descriptor:</span> <span class="hljs-string">Lcom/tlq/algorithm/tree/TreeNode;</span><br>    <span class="hljs-attr">flags:</span><br><br>  <span class="hljs-string">com.tlq.algorithm.tree.TreeNode</span> <span class="hljs-string">right;</span><br>    <span class="hljs-attr">descriptor:</span> <span class="hljs-string">Lcom/tlq/algorithm/tree/TreeNode;</span><br>    <span class="hljs-attr">flags:</span><br><br>  <span class="hljs-string">com.tlq.algorithm.tree.TreeNode();</span><br>    <span class="hljs-attr">descriptor:</span> <span class="hljs-string">()V</span><br>    <span class="hljs-attr">flags:</span><br>    <span class="hljs-attr">Code:</span><br>      <span class="hljs-string">stack=1</span>, <span class="hljs-string">locals=1</span>, <span class="hljs-string">args_size=1</span><br>         <span class="hljs-attr">0:</span> <span class="hljs-string">aload_0</span><br>         <span class="hljs-attr">1:</span> <span class="hljs-string">invokespecial</span> <span class="hljs-comment">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>         <span class="hljs-attr">4:</span> <span class="hljs-string">return</span><br>      <span class="hljs-attr">LineNumberTable:</span><br>        <span class="hljs-attr">line 14:</span> <span class="hljs-number">0</span><br><br>  <span class="hljs-string">com.tlq.algorithm.tree.TreeNode(int);</span><br>    <span class="hljs-attr">descriptor:</span> <span class="hljs-string">(I)V</span><br>    <span class="hljs-attr">flags:</span><br>    <span class="hljs-attr">Code:</span><br>      <span class="hljs-string">stack=2</span>, <span class="hljs-string">locals=2</span>, <span class="hljs-string">args_size=2</span><br>         <span class="hljs-attr">0:</span> <span class="hljs-string">aload_0</span><br>         <span class="hljs-attr">1:</span> <span class="hljs-string">invokespecial</span> <span class="hljs-comment">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>         <span class="hljs-attr">4:</span> <span class="hljs-string">aload_0</span><br>         <span class="hljs-attr">5:</span> <span class="hljs-string">iload_1</span><br>         <span class="hljs-attr">6:</span> <span class="hljs-string">putfield</span>      <span class="hljs-comment">#7                  // Field val:I</span><br>         <span class="hljs-attr">9:</span> <span class="hljs-string">return</span><br>      <span class="hljs-attr">LineNumberTable:</span><br>        <span class="hljs-attr">line 16:</span> <span class="hljs-number">0</span><br>        <span class="hljs-attr">line 17:</span> <span class="hljs-number">4</span><br>        <span class="hljs-attr">line 18:</span> <span class="hljs-number">9</span><br><br>  <span class="hljs-string">com.tlq.algorithm.tree.TreeNode(int</span>, <span class="hljs-string">com.tlq.algorithm.tree.TreeNode</span>, <span class="hljs-string">com.tlq.algorithm.tree.TreeNode);</span><br>    <span class="hljs-attr">descriptor:</span> <span class="hljs-string">(ILcom/tlq/algorithm/tree/TreeNode;Lcom/tlq/algorithm/tree/TreeNode;)V</span><br>    <span class="hljs-attr">flags:</span><br>    <span class="hljs-attr">Code:</span><br>      <span class="hljs-string">stack=2</span>, <span class="hljs-string">locals=4</span>, <span class="hljs-string">args_size=4</span><br>         <span class="hljs-attr">0:</span> <span class="hljs-string">aload_0</span><br>         <span class="hljs-attr">1:</span> <span class="hljs-string">invokespecial</span> <span class="hljs-comment">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>         <span class="hljs-attr">4:</span> <span class="hljs-string">aload_0</span><br>         <span class="hljs-attr">5:</span> <span class="hljs-string">iload_1</span><br>         <span class="hljs-attr">6:</span> <span class="hljs-string">putfield</span>      <span class="hljs-comment">#7                  // Field val:I</span><br>         <span class="hljs-attr">9:</span> <span class="hljs-string">aload_0</span><br>        <span class="hljs-attr">10:</span> <span class="hljs-string">aload_2</span><br>        <span class="hljs-attr">11:</span> <span class="hljs-string">putfield</span>      <span class="hljs-comment">#13                 // Field left:Lcom/tlq/algorithm/tree/TreeNode;</span><br>        <span class="hljs-attr">14:</span> <span class="hljs-string">aload_0</span><br>        <span class="hljs-attr">15:</span> <span class="hljs-string">aload_3</span><br>        <span class="hljs-attr">16:</span> <span class="hljs-string">putfield</span>      <span class="hljs-comment">#17                 // Field right:Lcom/tlq/algorithm/tree/TreeNode;</span><br>        <span class="hljs-attr">19:</span> <span class="hljs-string">return</span><br>      <span class="hljs-attr">LineNumberTable:</span><br>        <span class="hljs-attr">line 20:</span> <span class="hljs-number">0</span><br>        <span class="hljs-attr">line 21:</span> <span class="hljs-number">4</span><br>        <span class="hljs-attr">line 22:</span> <span class="hljs-number">9</span><br>        <span class="hljs-attr">line 23:</span> <span class="hljs-number">14</span><br>        <span class="hljs-attr">line 24:</span> <span class="hljs-number">19</span><br>&#125;<br><span class="hljs-attr">SourceFile:</span> <span class="hljs-string">&quot;TreeNode.java&quot;</span><br></code></pre></td></tr></table></figure><p>上述的class文件主要包含如下三大块信息：</p><ul><li>Code区：编写代码编译后的JVM指令集，字节码增强的主要操作区域</li><li>LineNumberTable：行号表，是行号对Code区指令集的关联，知道哪一行需执行哪些指令</li><li>LocalVeriableTable：本地变量表，就是局部变量的定义，实际存储结构也是和类的字段表是类似的</li></ul><p>使用字节码增强的技术有如下：</p><ul><li><p>ASM字节码增强类库</p><p>ASM是一个轻量级的Java字节码操作框架，在虚拟机指令层进行字节码操作，在加载和操作类文件时不需要将整个类读取到内存，就可以以流式的方式来处理字节码文件</p><p>优点：</p><p>由于使用流式的加载和处理机制，因此消耗的内存较小，并且是几个字节码增强工具中速度最快的一种增强技术</p><p>缺点：</p><p>编程难度较大，需熟悉JVM各种指令集（为降低难度，ASM提供了工具已查看常规代码的ASM编码 - ASM ByteCode OutLine（idea plugin））</p><p>ASM字节码增强类库的工作流程</p><p><img src="/ASM%E5%AD%97%E8%8A%82%E7%A0%81%E5%A2%9E%E5%BC%BA%E5%8E%9F%E7%90%86.png" alt="ASM字节码增强原理"></p><p>ASM Core API主要包括的工具类：</p><ul><li>ClassReader: 用于读取已经编译好的 <strong>.class文件</strong></li><li>ClassWriter：用于重新构造编译后的类，如修改类型、属性以及方法，也可以生成新类的字节码文件</li><li>各种Visitor类：如FieldVisitor、MethodVisitor、AnnotationVisitor分别对字节码中的属性、方法、注解进行处理</li></ul><p>另外还有一个TreeApi，以DOM的方式进行解析和操作</p></li><li><p>CGLib动态代理</p><p>GCLib动态大力基于ASM实现，同理Spring也一样</p><p>优点：</p><p>将ASM复杂的技术进行了包装，开放简单易用的工具类。使用简单的同时，整体速度也不差</p><p>缺点：</p><p>对ASM进行二次封装，字节码增强的灵活性有所下降</p><p>也因为封装，对于字节码增强灵活性减弱，还需要配合Java反射进行实现字节码增强</p><p>CGLib核心类：</p><p>Enhancer：用于创建代理类的工具类，可以设置目标类以及代理回调对象</p><p>MethodInterceptor：主要是实现代理回调的方法，用于拦截实现自己的业务功能</p></li><li><p>Javassis字节码增强类库</p><p>Javasist是一个开源分析、编辑和创建的Java字节码类库</p><p>基于源代码层面的字节码工具类，性能比ASM稍差</p><p>其主要核心工具类：</p><ul><li>ClassPool</li><li>CtClass</li><li>CtMethod</li><li>CtField</li></ul><p>优点：</p><p>简单、上手快（直接只用Java编码形式，且与Java反射的API颇为相似，不需要了解虚拟机指令，即可动态改变类的结构、动态生成类）</p><p>缺点：</p><ul><li>性能较差（操作字节码时性能较差，而不是执行字节码慢（不需频繁操作字节码时推荐使用））</li><li>不支持少量代码的书写<ul><li>不支持数组的初始化，如String[]{“1”,”2”}</li><li>不支持内部类和匿名类</li></ul></li></ul></li></ul><h3 id="资料引用"><a href="#资料引用" class="headerlink" title="资料引用"></a>资料引用</h3><ul><li><a href="https://juejin.cn/post/6844904098580398088">Java及动态代理详解</a></li><li><a href="https://mp.weixin.qq.com/s/QtsNf_nFElHWT11jl525Ug">Java字节码增强</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java 代理</tag>
      
      <tag>动态代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Aop 与 Aspectj的关系</title>
    <link href="/2022/11/27/Spring-Aop-%E4%B8%8E-Aspect%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <url>/2022/11/27/Spring-Aop-%E4%B8%8E-Aspect%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<h3 id="Spring-Aop"><a href="#Spring-Aop" class="headerlink" title="Spring Aop"></a>Spring Aop</h3><p>Spring AOP 是用纯 Java 实现的（<strong>不提供最完整的 AOP 实现，目的是提供 AOP 实现和 Spring IoC 之间的紧密集成，以解决应用程序中的常见问题</strong>），<strong>且通过运行时进行织入</strong>。不需要特殊的编译过程。Spring AOP 不需要控制类加载器层次结构，因此适合在 servlet 容器或应用服务器中使用。</p><blockquote><p><strong>简单描述</strong>：Spring AOP 旨在提供一个跨 Spring IoC 的简单 AOP 实现，以解决程序员面临的最常见问题。<strong>它并不是一个完整的 AOP 解决方案</strong>——它只能应用于由 Spring 容器管理的 beans。</p></blockquote><p>Spring AOP 是<strong>一个基于代理模式的 AOP 框架</strong>。这意味着要实现目标对象的方面，它将创建该对象的代理。这是通过以下两种方式之一实现的：</p><ol><li>JDK动态代理——Spring AOP的首选方式。只要目标对象实现了一个接口，就会使用 JDK 动态代理</li><li>CGLIB 代理——如果目标对象没有实现接口，那么可以使用 CGLIB 代理</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li><p>Spring AOP 目前只支持方法执行连接点（建议在 Spring beans 上执行方法）。字段拦截未实现，尽管可以在不破坏核心 Spring AOP API 的情况下添加对字段拦截的支持。如果您需要建议字段访问和更新连接点，请考虑使用 AspectJ 等语言。</p></li><li><p>Spring AOP基于代理模式。因此，它需要目标类的子类，并相应的应用横切关注点。但是也伴随着局限性，我们不能跨越“final”的类来应用横切关注点（或切面），因为它们不能被覆盖，从而导致运行时异常</p></li><li><p>不能应用于静态和final的方法。由于不能覆写，Spring的切面不能应用于他们。因此，Spring AOP由于这些限制，只支持执行方法的连接点。</p></li><li><p>Spring AOP 中，方面不会应用于在同一类中调用的方法。</p><blockquote><p>在同一个类中调用方法时，我们并没有调用 Spring AOP 提供的代理方法。如果我们需要这个功能，那么我们必须在不同的 bean 中定义一个单独的方法，或者使用 AspectJ。</p></blockquote></li></ul><h3 id="AspectJ"><a href="#AspectJ" class="headerlink" title="AspectJ"></a>AspectJ</h3><p><strong>AspectJ是原始的AOP技术，旨在提供完整的AOP解决方案。AspectJ使用的是编译时和类加载时织入</strong></p><p><strong>AspectJ 在运行时不做任何事情，因为类是直接用方面编译的</strong></p><p>AspectJ可使用如下三种不同类型的编织（<strong>即对对象进行增强</strong>）</p><ol><li><strong>编译时编织</strong>：AspectJ 编译器将我们方面的源代码和我们的应用程序作为输入，并生成编织类文件作为输出</li><li><strong>编译后编织</strong>：这也称为二进制编织。它用于将现有的类文件和 JAR 文件与我们的切面编织在一起</li><li><strong>加载时编织</strong>：这与之前的二进制编织完全一样，不同之处在于编织被推迟到类加载器将类文件加载到 JVM 时</li></ol><h3 id="两者对比"><a href="#两者对比" class="headerlink" title="两者对比"></a>两者对比</h3><p><img src="/2022/11/27/Spring-Aop-%E4%B8%8E-Aspect%E7%9A%84%E5%85%B3%E7%B3%BB/springaop-process.png" alt="springaop-process"></p><p><strong>两者 Joinpoint 支持对比</strong></p><table><thead><tr><th>Joinpoint</th><th>Spring AOP Supported</th><th>AspectJ Supported</th></tr></thead><tbody><tr><td>Method Call</td><td>No</td><td>Yes</td></tr><tr><td>Method Execution</td><td>Yes</td><td>Yes</td></tr><tr><td>Constructor Call</td><td>No</td><td>Yes</td></tr><tr><td>Constructor Execution</td><td>No</td><td>Yes</td></tr><tr><td>Static initializer execution</td><td>No</td><td>Yes</td></tr><tr><td>Object initialization</td><td>No</td><td>Yes</td></tr><tr><td>Field reference</td><td>No</td><td>Yes</td></tr><tr><td>Field assignment</td><td>No</td><td>Yes</td></tr><tr><td>Handler execution</td><td>No</td><td>Yes</td></tr><tr><td>Advice execution</td><td>No</td><td>Yes</td></tr></tbody></table><p><strong>两者整体对比</strong></p><table><thead><tr><th>Spring AOP</th><th>AspectJ</th></tr></thead><tbody><tr><td>纯Java实现</td><td>使用 Java 编程语言的扩展实现</td></tr><tr><td>无需单独的编译过程</td><td>除非设置了 LTW，否则需要 AspectJ 编译器 (ajc)</td></tr><tr><td>仅运行时编织可用</td><td>运行时编织不可用。支持编译时、编译后和加载时编织</td></tr><tr><td>不太强大——只支持方法级编织</td><td>更强大——可以编织字段、方法、构造函数、静态初始化器、最终类&#x2F;方法等……</td></tr><tr><td>只能在Spring容器管理的bean上实现</td><td>可以在所有领域对象上实现</td></tr><tr><td>仅支持方法执行切入点</td><td>支持所有切入点</td></tr><tr><td>代理由目标对象创建，并且方面应用于这些代理</td><td>在应用程序执行之前（在运行时之前），方面被直接编织到代码中</td></tr><tr><td>比 AspectJ 慢得多</td><td>更好的性能</td></tr><tr><td>易于学习和应用</td><td>相对于 Spring AOP 更复杂</td></tr></tbody></table><ul><li><p>与 Spring AOP 不同，AspectJ不需要任何设计模式。为了将方面编织到代码中，它引入了称为 AspectJ 编译器 (ajc) 的编译器，通过它我们可以编译我们的程序，然后通过提供一个小型（&lt; 100K）运行时库来运行它</p></li><li><p>对于性能层面，AspectJ（编译时织入）比 Spring Aop (运行时织入) <strong>跨得多</strong></p><blockquote><p><a href="https://web.archive.org/web/20150520175004/https://docs.codehaus.org/display/AW/AOP+Benchmark">基准测试</a>表明 AspectJ 几乎比 Spring AOP 快 8 到 35 倍</p></blockquote></li></ul><h3 id="思考点"><a href="#思考点" class="headerlink" title="思考点"></a>思考点</h3><p>框架与框架间没有好坏，<strong>而是应该基于更为适用于当前业务及架构层次去思考</strong></p><ul><li>框架：如果应用程序没有使用 Spring 框架，那么我们别无选择，只能放弃使用 Spring AOP 的想法，因为它无法管理任何超出 Spring 容器范围的东西。但是，如果我们的应用程序完全使用 Spring 框架创建，那么我们可以使用 Spring AOP，因为它易于学习和应用</li><li>灵活性：鉴于有限的连接点支持，Spring AOP 不是一个完整的 AOP 解决方案，但它解决了程序员面临的最常见问题。尽管如果我们想更深入地挖掘并最大限度地利用 AOP 并希望获得广泛可用连接点的支持，那么 AspectJ 是不二之选</li><li>性能：如果我们使用有限的方面，那么就会有微不足道的性能差异。但有时应用程序的方面会超过数万个。我们不想在这种情况下使用运行时织入，因此最好选择 AspectJ。AspectJ 比 Spring AOP 快 8 到 35 倍</li><li>两全其美：这两个框架彼此完全兼容。我们总是可以尽可能地利用 Spring AOP，并且仍然使用 AspectJ 来获得前者不支持的连接点的支持</li></ul><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ul><li><p>在Spring Aop 中 为什么强依赖 AspectJ </p><blockquote><p><strong>个人看法：</strong></p><p>在网上，大部分都是觉得的Spring只AspectJ的注解，<strong>但应该这样考虑，Apspect因为只支持（编译时、类加载时织入），没发做到运行时织入，那Spring 为了更为全面的功能，所以自己实现了运行时织入</strong></p></blockquote></li></ul><h3 id="资料"><a href="#资料" class="headerlink" title="资料:"></a>资料:</h3><ul><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#aop-introduction-spring-defn">Spring Aop官方文档</a></li><li><a href="https://www.baeldung.com/spring-aop-vs-aspectj">Spring Aop 与 AspectJ Blog</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Spring Aop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Aop</tag>
      
      <tag>Java 代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

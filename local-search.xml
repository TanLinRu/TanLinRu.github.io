<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring Aop 与 Aspect的关系</title>
    <link href="/2022/11/27/Spring-Aop-%E4%B8%8E-Aspect%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <url>/2022/11/27/Spring-Aop-%E4%B8%8E-Aspect%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<p><code>BeanWrapper</code>接口及其对应的实现（<code>BeanWrapperImpl</code>）。正如 javadoc 中引用的那样，它 <code>BeanWrapper</code>提供了设置和获取属性值（单独或批量）、获取属性描述符和查询属性以确定它们是可读还是可写的功能。此外，<code>BeanWrapper</code>还提供对嵌套属性的支持，使子属性的属性设置能够无限深入。<code>BeanWrapper</code>它还支持添加标准 JavaBeans<code>PropertyChangeListeners</code> 和的 能力<code>VetoableChangeListeners</code>，而无需在目标类中添加支持代码。最后但同样重要的是，<code>BeanWrapper</code>提供了对设置索引属性的支持。通常不直接由应用程序代码使用，<code>BeanWrapper</code>而是由 .<code>DataBinder</code>和<code>BeanFactory</code></p><p><img src="/2022/11/27/Spring-Aop-%E4%B8%8E-Aspect%E7%9A%84%E5%85%B3%E7%B3%BB/test.png" alt="test"></p>]]></content>
    
    
    <categories>
      
      <category>Spring Aop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Aop</tag>
      
      <tag>Java 代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
